<ResourceDictionary xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:controls="using:Microsoft.UI.Xaml.Controls"  xmlns:primitives="using:Microsoft.UI.Xaml.Controls.Primitives"   xmlns:primitiveContract7Present="using:Microsoft.UI.Xaml.Controls.Primitives?IsApiContractPresent(Windows.Foundation.UniversalApiContract,7)"     xmlns:media="using:Microsoft.UI.Xaml.Media" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
  <Style TargetType="controls:RatingControl">
    <Setter Property="Height" Value="32" />
    <!-- 9794813: retire these two properties as customisation points once all resource keys available -->
    <Setter Property="Foreground" Value="{ThemeResource RatingControlCaptionForeground}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
    <Setter Property="ItemInfo" Value="{ThemeResource MUX_RatingControlDefaultFontInfo}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RatingControl">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlDisabledSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Placeholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverPlaceholder">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverPlaceholderForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverUnselected">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlPointerOverUnselectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Set">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSet">
                  <VisualState.Setters>
                    <Setter Target="ForegroundContentPresenter.Foreground" Value="{ThemeResource RatingControlSelectedForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="-20,-20,-20,-20">
              <StackPanel x:Name="RatingBackgroundStackPanel" Orientation="Horizontal" Background="Transparent" Margin="20,20,0,20" />
              <TextBlock x:Name="Caption" Height="32" Margin="4,9,20,0" TextLineBounds="TrimToBaseline" Style="{ThemeResource CaptionTextBlockStyle}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" AutomationProperties.Name="RatingCaption" IsHitTestVisible="False" Text="{TemplateBinding Caption}" />
              <!-- 4 = 8 item spacing +4 of magic redline spacing -8 to compensate for scale of the last RatingItem -->
              <!-- NB: The redlines say 8px, but it's really 12 px because:
                                Designer note: The value between the last glyph and first text character is 12px.
                                (There's 4px of whitespace accounted for in the text area in the redline) -->
              <!-- TODO MSFT: 9925444 Fix vertical alignment in all text scenarios -->
            </StackPanel>
            <ContentPresenter x:Name="ForegroundContentPresenter" IsHitTestVisible="False" Grid.Row="0">
              <!-- Margin is on the StackPanel because ContentPresenter clips differently such that moving the reverse margin up won't work -->
              <StackPanel Orientation="Horizontal" Margin="-40,-40,-40,-40">
                <StackPanel x:Name="RatingForegroundStackPanel" Orientation="Horizontal" IsHitTestVisible="False" Margin="40,40,40,40" />
              </StackPanel>
            </ContentPresenter>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationView">
    <Setter Property="PaneToggleButtonStyle" Value="{StaticResource PaneToggleButtonStyle}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CompactPaneLength" Value="{ThemeResource NavigationViewCompactPaneLength}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationView">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="DisplayModeGroup">
                <VisualState x:Name="Compact" />
                <VisualState x:Name="Expanded">
                  <VisualState.Setters>
                    <Setter Target="RootSplitView.PaneBackground" Value="{ThemeResource NavigationViewExpandedPaneBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Minimal">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource NavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopNavigationMinimal" />
                <VisualState x:Name="MinimalWithBackButton">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Margin" Value="{ThemeResource NavigationViewMinimalHeaderMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TogglePaneGroup">
                <VisualState x:Name="TogglePaneButtonVisible" />
                <VisualState x:Name="TogglePaneButtonCollapsed" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeaderGroup">
                <VisualState x:Name="HeaderVisible" />
                <VisualState x:Name="HeaderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderContent.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AutoSuggestGroup">
                <VisualState x:Name="AutoSuggestBoxVisible" />
                <VisualState x:Name="AutoSuggestBoxCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AutoSuggestArea.Visibility" Value="Collapsed" />
                    <Setter Target="TopPaneAutoSuggestArea.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateGroup">
                <VisualState x:Name="NotClosedCompact" />
                <VisualState x:Name="ClosedCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneAutoSuggestBoxPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="PaneAutoSuggestButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneStateListSizeGroup">
                <VisualState x:Name="ListSizeFull" />
                <VisualState x:Name="ListSizeCompact">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Width" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CompactPaneLength}" />
                    <Setter Target="PaneTitleTextBlock.Visibility" Value="Collapsed" />
                    <Setter Target="PaneHeaderContentBorder.Visibility" Value="Collapsed" />
                    <Setter Target="PaneCustomContentBorder.HorizontalAlignment" Value="Left" />
                    <Setter Target="FooterContentBorder.HorizontalAlignment" Value="Left" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TitleBarVisibilityGroup">
                <VisualState x:Name="TitleBarVisible" />
                <VisualState x:Name="TitleBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PaneContentGrid.Margin" Value="0,32,0,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="OverflowLabelGroup">
                <VisualState x:Name="OverflowButtonWithLabel" />
                <VisualState x:Name="OverflowButtonNoLabel">
                  <VisualState.Setters>
                    <Setter Target="TopNavOverflowButton.Style" Value="{ThemeResource NavigationViewOverflowButtonNoLabelStyleWhenPaneOnTop}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BackButtonGroup">
                <VisualState x:Name="BackButtonVisible" />
                <VisualState x:Name="BackButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="BackButtonPlaceholderOnTopNav.Width" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PaneVisibilityGroup">
                <VisualState x:Name="PaneVisible" />
                <VisualState x:Name="PaneCollapsed">
                  <VisualState.Setters>
                    <!-- Note that RootSplitView.DisplayMode is set in code so we don't want to -->
                    <!-- write it here and interfere. But these values work together to hide -->
                    <!-- the left pane. -->
                    <Setter Target="RootSplitView.CompactPaneLength" Value="0" />
                    <Setter Target="PaneToggleButtonGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Button grid -->
            <Grid x:Name="PaneToggleButtonGrid" Margin="0,0,0,8" HorizontalAlignment="Left" VerticalAlignment="Top" Canvas.ZIndex="100">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <Grid x:Name="TogglePaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
              <Grid x:Name="ButtonHolderGrid" Grid.Row="1">
                <Button x:Name="NavigationViewBackButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.BackButtonVisibility}" IsEnabled="{TemplateBinding IsBackEnabled}">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewBackButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="NavigationViewCloseButton" Style="{StaticResource NavigationBackButtonNormalStyle}" VerticalAlignment="Top">
                  <ToolTipService.ToolTip>
                    <ToolTip x:Name="NavigationViewCloseButtonToolTip" />
                  </ToolTipService.ToolTip>
                </Button>
                <Button x:Name="TogglePaneButton" Style="{TemplateBinding PaneToggleButtonStyle}" AutomationProperties.LandmarkType="Navigation" HorizontalAlignment="Center" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.PaneToggleButtonVisibility}" VerticalAlignment="Top">
                  <TextBlock x:Name="PaneTitleTextBlock" Grid.Column="0" Text="{TemplateBinding PaneTitle}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{StaticResource NavigationViewItemHeaderTextStyle}" />
                </Button>
                <Grid x:Name="PaneTitleHolder" Visibility="Collapsed">
                  <ContentControl x:Name="PaneTitlePresenter" Margin="{ThemeResource NavigationViewPaneTitlePresenterMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" />
                </Grid>
              </Grid>
            </Grid>
            <!-- Content layouts -->
            <Grid>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>
              <!-- DisplayMode top -->
              <StackPanel x:Name="TopNavArea" Background="{ThemeResource NavigationViewTopPaneBackground}" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Top" Canvas.ZIndex="1" XYFocusKeyboardNavigation="Enabled">
                <Grid x:Name="TopNavTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}" />
                <Grid x:Name="TopNavGrid" Height="{ThemeResource NavigationViewTopPaneHeight}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPaneVisibility}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="BackButtonPlaceholderOnTopNav" Width="{ThemeResource NavigationBackButtonWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" MinWidth="{ThemeResource TopNavigationViewPaneCustomContentMinWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <Grid x:Name="TopNavLeftPadding" Grid.Column="1" Width="0" />
                  <ContentControl x:Name="PaneHeaderOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                  <ContentControl x:Name="PaneTitleOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                  <!-- Top nav ItemsRepeater -->
                  <controls:ItemsRepeaterScrollHost Grid.Column="3">
                    <ScrollViewer HorizontalScrollMode="Disabled" HorizontalScrollBarVisibility="Hidden" VerticalScrollMode="Disabled" VerticalScrollBarVisibility="Hidden">
                      <controls:ItemsRepeater AutomationProperties.LandmarkType="Navigation" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content" x:Name="TopNavMenuItemsHost">
                        <controls:ItemsRepeater.Layout>
                          <controls:StackLayout Orientation="Horizontal" />
                        </controls:ItemsRepeater.Layout>
                      </controls:ItemsRepeater>
                    </ScrollViewer>
                  </controls:ItemsRepeaterScrollHost>
                  <Button x:Name="TopNavOverflowButton" Grid.Column="4" Content="More" Margin="{ThemeResource TopNavigationViewOverflowButtonMargin}" Style="{StaticResource NavigationViewOverflowButtonStyleWhenPaneOnTop}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.OverflowButtonVisibility}">
                    <Button.Flyout>
                      <Flyout Placement="Bottom" ElementSoundMode="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ElementSoundMode}">
                        <Flyout.FlyoutPresenterStyle>
                          <Style TargetType="FlyoutPresenter">
                            <Setter Property="Padding" Value="{ThemeResource TopNavigationViewOverflowMenuPadding}" />
                            <!-- Set negative top margin to make the flyout align exactly with the button -->
                            <Setter Property="Margin" Value="0,-4,0,0" />
                            <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                            <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                            <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                            <Setter Property="Template">
                              <Setter.Value>
                                <ControlTemplate TargetType="FlyoutPresenter">
                                  <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                                    <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
                                  </ScrollViewer>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </Flyout.FlyoutPresenterStyle>
                        <controls:ItemsRepeaterScrollHost>
                          <ScrollViewer VerticalScrollBarVisibility="Auto">
                            <controls:ItemsRepeater AutomationProperties.AccessibilityView="Content" x:Name="TopNavMenuItemsOverflowHost" />
                          </ScrollViewer>
                        </controls:ItemsRepeaterScrollHost>
                      </Flyout>
                    </Button.Flyout>
                  </Button>
                  <ContentControl x:Name="PaneCustomContentOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="5" />
                  <Grid x:Name="TopPaneAutoSuggestArea" Height="{ThemeResource NavigationViewTopPaneHeight}" Grid.Column="6">
                    <ContentControl x:Name="TopPaneAutoSuggestBoxPresenter" Margin="{ThemeResource TopNavigationViewAutoSuggestBoxMargin}" MinWidth="48" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                  </Grid>
                  <ContentControl x:Name="PaneFooterOnTopPane" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="7" />
                  <!-- Top footer menu ItemsRepeater -->
                  <controls:ItemsRepeater Grid.Column="8" AutomationProperties.LandmarkType="Navigation" AutomationProperties.AccessibilityView="Content" x:Name="TopFooterMenuItemsHost">
                    <controls:ItemsRepeater.Layout>
                      <controls:StackLayout Orientation="Horizontal" />
                    </controls:ItemsRepeater.Layout>
                  </controls:ItemsRepeater>
                </Grid>
                <Border x:Name="TopNavContentOverlayAreaGrid" Child="{TemplateBinding ContentOverlay}" />
              </StackPanel>
              <!-- Displaymode (compact/minimal/normal) left -->
              <SplitView x:Name="RootSplitView" Background="{TemplateBinding Background}" CompactPaneLength="{TemplateBinding CompactPaneLength}" DisplayMode="Inline" IsPaneOpen="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPaneOpen, Mode=TwoWay}" IsTabStop="False" OpenPaneLength="{TemplateBinding OpenPaneLength}" PaneBackground="{ThemeResource NavigationViewDefaultPaneBackground}" Grid.Row="1">
                <SplitView.Pane>
                  <Grid x:Name="PaneContentGrid" HorizontalAlignment="Left" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="0" />
                      <!-- above button margin + back button space -->
                      <RowDefinition x:Name="PaneContentGridToggleButtonRow" Height="Auto" MinHeight="{StaticResource NavigationViewPaneHeaderRowMinHeight}" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="8" />
                      <!-- above list margin -->
                      <RowDefinition x:Name="ItemsContainerRow" Height="*" />
                    </Grid.RowDefinitions>
                    <Grid x:Name="ContentPaneTopPadding" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" />
                    <Grid Grid.Row="2">
                      <Grid.RowDefinitions>
                        <RowDefinition x:Name="PaneHeaderContentBorderRow" />
                      </Grid.RowDefinitions>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition x:Name="PaneHeaderCloseButtonColumn" />
                        <ColumnDefinition x:Name="PaneHeaderToggleButtonColumn" />
                        <ColumnDefinition Width="*" />
                      </Grid.ColumnDefinitions>
                      <ContentControl x:Name="PaneHeaderContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Column="2" />
                    </Grid>
                    <Grid x:Name="AutoSuggestArea" Grid.Row="3" Height="{ThemeResource NavigationViewTopPaneHeight}" VerticalAlignment="Center">
                      <ContentControl x:Name="PaneAutoSuggestBoxPresenter" Margin="{ThemeResource NavigationViewAutoSuggestBoxMargin}" IsTabStop="False" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Center" />
                      <Button x:Name="PaneAutoSuggestButton" Visibility="Collapsed" Style="{ThemeResource NavigationViewPaneSearchButtonStyle}" Width="{TemplateBinding CompactPaneLength}" />
                    </Grid>
                    <ContentControl x:Name="PaneCustomContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="4" />
                    <!-- "Non header" content -->
                    <Grid x:Name="ItemsContainerGrid" Grid.Row="6" Margin="0,0,0,8">
                      <Grid.RowDefinitions>
                        <RowDefinition x:Name="MenuItemsRow" Height="Auto" MinHeight="{ThemeResource NavigationViewItemOnLeftMinHeight}" />
                        <!-- MenuItems -->
                        <RowDefinition Height="*" MinHeight="21" />
                        <!-- Fill spacing -->
                        <RowDefinition Height="Auto" />
                        <!-- PaneFooter -->
                        <RowDefinition x:Name="FooterItemsRow" Height="Auto" MinHeight="{ThemeResource NavigationViewItemOnLeftMinHeight}" />
                        <!-- FooterItems -->
                      </Grid.RowDefinitions>
                      <!-- MenuItems -->
                      <controls:ItemsRepeaterScrollHost HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <ScrollViewer x:Name="MenuItemsScrollViewer" TabNavigation="Local" VerticalScrollBarVisibility="Auto">
                          <!-- Left nav ItemsRepeater -->
                          <controls:ItemsRepeater x:Name="MenuItemsHost" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}" AutomationProperties.AccessibilityView="Content" />
                        </ScrollViewer>
                      </controls:ItemsRepeaterScrollHost>
                      <controls:NavigationViewItemSeparator x:Name="VisualItemsSeparator" Grid.Row="1" VerticalAlignment="Center" Visibility="Collapsed" HorizontalAlignment="Stretch" />
                      <!-- PaneFooter -->
                      <ContentControl x:Name="FooterContentBorder" IsTabStop="False" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Grid.Row="2" />
                      <!-- FooterItems -->
                      <controls:ItemsRepeaterScrollHost Grid.Row="3">
                        <ScrollViewer x:Name="FooterItemsScrollViewer">
                          <controls:ItemsRepeater x:Name="FooterMenuItemsHost" AutomationProperties.AccessibilityView="Content" />
                        </ScrollViewer>
                      </controls:ItemsRepeaterScrollHost>
                    </Grid>
                  </Grid>
                </SplitView.Pane>
                <SplitView.Content>
                  <Grid x:Name="ContentGrid">
                    <Grid.RowDefinitions>
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="Auto" />
                      <RowDefinition Height="*" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid x:Name="ContentTopPadding" Grid.ColumnSpan="2" Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopPadding}" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.LeftPaneVisibility}" />
                    <Grid x:Name="ContentLeftPadding" Grid.Row="1" />
                    <ContentControl x:Name="HeaderContent" Grid.Row="1" Grid.Column="1" MinHeight="{StaticResource PaneToggleButtonHeight}" IsTabStop="False" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch" Style="{StaticResource NavigationViewTitleHeaderContentControlTextStyle}" />
                    <ContentPresenter AutomationProperties.LandmarkType="Main" Grid.Row="2" Grid.ColumnSpan="2" Content="{TemplateBinding Content}" />
                  </Grid>
                </SplitView.Content>
              </SplitView>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItem">
    <Setter Property="Foreground" Value="{ThemeResource NavigationViewItemForeground}" />
    <Setter Property="Background" Value="{ThemeResource NavigationViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource NavigationViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{StaticResource NavigationViewItemBorderThickness}" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="Margin" Value="{ThemeResource NavigationViewItemMargin}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItem">
          <Grid x:Name="NVIRootGrid">
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ItemOnNavigationViewListPositionStates">
                <VisualState x:Name="OnLeftNavigation">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnLeftPane}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnLeftNavigationReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnLeftPaneWithRevealFocus}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimary">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource TopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnTopPane}" />
                    <Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationPrimaryReveal">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Margin" Value="{ThemeResource TopNavigationViewItemMargin}" />
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnTopPaneWithRevealFocus}" />
                    <Setter Target="ChildrenFlyout.Placement" Value="Bottom" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnTopNavigationOverflow">
                  <VisualState.Setters>
                    <Setter Target="NavigationViewItemPresenter.Style" Value="{StaticResource MUX_NavigationViewItemPresenterStyleWhenOnTopPaneOverflow}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <primitives:NavigationViewItemPresenter x:Name="NavigationViewItemPresenter" Icon="{TemplateBinding Icon}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Margin="{TemplateBinding Margin}" Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" UseSystemFocusVisuals="{TemplateBinding UseSystemFocusVisuals}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" Content="{TemplateBinding Content}" primitiveContract7Present:CornerRadius="{TemplateBinding CornerRadius}" IsTabStop="false" Control.IsTemplateFocusTarget="True" />
            <controls:ItemsRepeater Grid.Row="1" Visibility="Collapsed" x:Name="NavigationViewItemMenuItemsHost">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Vertical" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <FlyoutBase.AttachedFlyout>
              <Flyout x:Name="ChildrenFlyout" Placement="Right">
                <Flyout.FlyoutPresenterStyle>
                  <Style TargetType="FlyoutPresenter">
                    <Setter Property="Padding" Value="{ThemeResource NavigationViewItemChildrenMenuFlyoutPadding}" />
                    <!-- Set negative top margin to make the flyout align exactly with the button -->
                    <Setter Property="Margin" Value="0,-4,0,0" />
                    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Auto" />
                    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
                    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="FlyoutPresenter">
                          <ScrollViewer x:Name="ScrollViewer" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" AutomationProperties.AccessibilityView="Raw">
                            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" Padding="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" CornerRadius="{ThemeResource OverlayCornerRadius}" />
                          </ScrollViewer>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>
                </Flyout.FlyoutPresenterStyle>
                <Grid x:Name="FlyoutRootGrid">
                  <Grid x:Name="FlyoutContentGrid" />
                </Grid>
              </Flyout>
            </FlyoutBase.AttachedFlyout>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:NavigationViewItemPresenter" />
  <Style TargetType="controls:NavigationViewItemHeader">
    <Setter Property="IsEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NavigationViewItemHeader">
          <Grid x:Name="NavigationViewItemHeaderRootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="PaneStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="HeaderTextCollapsed" To="HeaderTextVisible">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerHeaderGrid" Storyboard.TargetProperty="Height">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="40" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0.0" />
                        <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="0.0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.2" KeySpline="0.0,0.35 0.15,1.0" Value="1.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="HeaderTextVisible" To="HeaderTextCollapsed">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerHeaderGrid" Storyboard.TargetProperty="Height">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="20" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0.2" Value="Collapsed" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="HeaderText" Storyboard.TargetProperty="Opacity">
                        <LinearDoubleKeyFrame KeyTime="0:0:0" Value="1.0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.1" KeySpline="0.0,0.35 0.15,1.0" Value="0.0" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="HeaderTextVisible" />
                <VisualState x:Name="HeaderTextCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HeaderText.Visibility" Value="Collapsed" />
                    <Setter Target="InnerHeaderGrid.Height" Value="20" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="InnerHeaderGrid" Height="40" HorizontalAlignment="Left" Margin="{ThemeResource NavigationViewItemInnerHeaderMargin}">
              <TextBlock x:Name="HeaderText" VerticalAlignment="Center" Margin="0,-1,0,-1" Style="{StaticResource NavigationViewItemHeaderTextStyle}" Text="{TemplateBinding Content}" TextWrapping="NoWrap" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NavigationViewItemSeparator">
    <Setter Property="IsEnabled" Value="False" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="MinHeight" Value="0" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <Grid x:Name="NavigationViewItemSeparatorRootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="NavigationSeparatorLineStates">
                <VisualState x:Name="HorizontalLine" />
                <VisualState x:Name="HorizontalLineCompact">
                  <VisualState.Setters>
                    <Setter Target="SeparatorLine.Margin" Value="{ThemeResource NavigationViewCompactItemSeparatorMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="VerticalLine">
                  <VisualState.Setters>
                    <Setter Target="SeparatorLine.Height" Value="20" />
                    <Setter Target="SeparatorLine.Width" Value="{ThemeResource TopNavigationViewItemSeparatorWidth}" />
                    <Setter Target="SeparatorLine.Margin" Value="{ThemeResource TopNavigationViewItemSeparatorMargin}" />
                    <Setter Target="SeparatorLine.VerticalAlignment" Value="Center" />
                    <Setter Target="SeparatorLine.Fill" Value="{ThemeResource TopNavigationViewItemSeparatorForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Rectangle x:Name="SeparatorLine" Height="{ThemeResource NavigationViewItemSeparatorHeight}" Margin="{ThemeResource NavigationViewItemSeparatorMargin}" Fill="{ThemeResource NavigationViewItemSeparatorForeground}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationBackButtonNormalStyle" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource NavigationViewBackButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    <Setter Property="FontSize" Value="16" />
    <Setter Property="Height" Value="{ThemeResource NavigationBackButtonHeight}" />
    <Setter Property="Width" Value="{ThemeResource NavigationBackButtonWidth}" />
    <Setter Property="HorizontalContentAlignment" Value="Center" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="Content" Value="&#xE72B;" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Content" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource NavigationViewButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <FontIcon x:Name="Content" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" Glyph="{TemplateBinding Content}" MirroredWhenRightToLeft="True" Foreground="{TemplateBinding Foreground}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="NavigationBackButtonSmallStyle" TargetType="Button" BasedOn="{StaticResource NavigationBackButtonNormalStyle}">
    <Setter Property="FontSize" Value="20" />
    <Setter Property="Height" Value="32" />
    <Setter Property="Width" Value="32" />
  </Style>
  <Style TargetType="controls:ColorPicker" BasedOn="{StaticResource DefaultColorPickerStyle}" />
  <Style x:Key="DefaultColorPickerStyle" TargetType="controls:ColorPicker">
    <Setter Property="MaxWidth" Value="392" />
    <Setter Property="MinWidth" Value="312" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ColorPicker">
          <Grid Background="{TemplateBinding Background}">
            <Grid.Resources>
              <Style x:Key="ColorPickerSliderStyle" TargetType="primitives:ColorPickerSlider">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Slider">
                      <Grid Margin="0,5,0,0">
                        <Grid.Resources>
                          <Style x:Key="SliderThumbStyle" TargetType="Thumb">
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="Background" Value="{ThemeResource ColorPickerSliderThumbBackground}" />
                            <Setter Property="Template">
                              <Setter.Value>
                                <ControlTemplate TargetType="Thumb">
                                  <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="{ThemeResource SliderThumbCornerRadius}" />
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </Grid.Resources>
                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="Pressed">
                              <VisualState.Setters>
                                <Setter Target="HorizontalThumb.Background" Value="{ThemeResource ColorPickerSliderThumbBackgroundPressed}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <VisualState.Setters>
                                <Setter Target="HeaderContentPresenter.Foreground" Value="{ThemeResource SystemControlDisabledBaseMediumLowBrush}" />
                                <Setter Target="HorizontalThumb.Background" Value="{ThemeResource ColorPickerSliderThumbBackgroundDisabled}" />
                                <Setter Target="HorizontalTrackRect.Fill" Value="{ThemeResource ColorPickerSliderTrackFillDisabled}" />
                                <Setter Target="HorizontalDecreaseRect.Fill" Value="{ThemeResource ColorPickerSliderTrackFillDisabled}" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="PointerOver">
                              <VisualState.Setters>
                                <Setter Target="HorizontalThumb.Background" Value="{ThemeResource ColorPickerSliderThumbBackgroundPointerOver}" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                          <VisualStateGroup x:Name="FocusEngagementStates">
                            <VisualState x:Name="FocusDisengaged" />
                            <VisualState x:Name="FocusEngagedHorizontal">
                              <VisualState.Setters>
                                <Setter Target="SliderContainer.(Control.IsTemplateFocusTarget)" Value="False" />
                                <Setter Target="HorizontalThumb.(Control.IsTemplateFocusTarget)" Value="True" />
                              </VisualState.Setters>
                            </VisualState>
                            <VisualState x:Name="FocusEngagedVertical">
                              <VisualState.Setters>
                                <Setter Target="SliderContainer.(Control.IsTemplateFocusTarget)" Value="False" />
                                <Setter Target="VerticalThumb.(Control.IsTemplateFocusTarget)" Value="True" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="HeaderContentPresenter" ContentTemplate="{TemplateBinding HeaderTemplate}" Content="{TemplateBinding Header}" Foreground="{ThemeResource SliderHeaderForeground}" FontWeight="{ThemeResource SliderHeaderThemeFontWeight}" Margin="{ThemeResource SliderHeaderThemeMargin}" TextWrapping="Wrap" Visibility="Collapsed" x:DeferLoadStrategy="Lazy" />
                        <Grid x:Name="SliderContainer" Background="Transparent" Control.IsTemplateFocusTarget="True" Grid.Row="1">
                          <Grid x:Name="HorizontalTemplate" MinHeight="44">
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" />
                              <ColumnDefinition Width="Auto" />
                              <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                              <RowDefinition Height="18" />
                              <RowDefinition Height="Auto" />
                              <RowDefinition Height="18" />
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="HorizontalTrackRect" Grid.ColumnSpan="3" Fill="Transparent" Height="{ThemeResource SliderTrackThemeHeight}" Grid.Row="1" Opacity="0" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                            <Rectangle x:Name="HorizontalDecreaseRect" Fill="Transparent" Grid.Row="1" Opacity="0" />
                            <Thumb x:Name="HorizontalThumb" AutomationProperties.AccessibilityView="Raw" Grid.Column="1" DataContext="{TemplateBinding Value}" Height="{ThemeResource SliderHorizontalThumbHeight}" Grid.Row="0" Grid.RowSpan="3" Style="{StaticResource SliderThumbStyle}" Width="{ThemeResource SliderHorizontalThumbWidth}">
                              <ToolTipService.ToolTip>
                                <ToolTip x:Name="ToolTip" VerticalOffset="20" />
                              </ToolTipService.ToolTip>
                            </Thumb>
                          </Grid>
                        </Grid>
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
              <SolidColorBrush x:Name="CheckerColorBrush" Color="{ThemeResource SystemListLowColor}" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ColorSpectrumVisibility">
                <VisualState x:Name="ColorSpectrumVisible" />
                <VisualState x:Name="ColorSpectrumCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ColorSpectrum.Visibility" Value="Collapsed" />
                    <Setter Target="ColorPreviewRectangleGrid.Width" Value="NaN" />
                    <Setter Target="ColorPreviewRectangleGrid.Height" Value="44" />
                    <Setter Target="ColorPreviewRectangleGrid.Margin" Value="0" />
                    <Setter Target="ColorPreviewRectangleGrid.(Grid.Column)" Value="0" />
                    <Setter Target="ColorPreviewRectangleGrid.(Grid.ColumnSpan)" Value="2" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ColorPreviewVisibility">
                <VisualState x:Name="ColorPreviewVisible" />
                <VisualState x:Name="ColorPreviewCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ColorPreviewRectangleGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousColorVisibility">
                <VisualState x:Name="PreviousColorCollapsedVertical" />
                <VisualState x:Name="PreviousColorVisibleVertical">
                  <VisualState.Setters>
                    <Setter Target="ColorPreviewRectangle.(Grid.RowSpan)" Value="1" />
                    <Setter Target="PreviousColorRectangle.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousColorCollapsedHorizontal">
                  <VisualState.Setters>
                    <Setter Target="PreviousColorRectangle.(Grid.Row)" Value="0" />
                    <Setter Target="PreviousColorRectangle.(Grid.Column)" Value="1" />
                    <Setter Target="PreviousColorRectangle.(Grid.RowSpan)" Value="2" />
                    <Setter Target="PreviousColorRectangle.(Grid.ColumnSpan)" Value="1" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousColorVisibleHorizontal">
                  <VisualState.Setters>
                    <Setter Target="ColorPreviewRectangle.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="PreviousColorRectangle.Visibility" Value="Visible" />
                    <Setter Target="PreviousColorRectangle.(Grid.Row)" Value="0" />
                    <Setter Target="PreviousColorRectangle.(Grid.Column)" Value="1" />
                    <Setter Target="PreviousColorRectangle.(Grid.RowSpan)" Value="2" />
                    <Setter Target="PreviousColorRectangle.(Grid.ColumnSpan)" Value="1" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ThirdDimensionSliderVisibility">
                <VisualState x:Name="ThirdDimensionSliderVisible" />
                <VisualState x:Name="ThirdDimensionSliderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ThirdDimensionSliderGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AlphaSliderVisibility">
                <VisualState x:Name="AlphaSliderVisible" />
                <VisualState x:Name="AlphaSliderCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AlphaSliderGrid.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="MoreButtonVisibility">
                <VisualState x:Name="MoreButtonVisible" />
                <VisualState x:Name="MoreButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="MoreButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TextEntryGridVisibility">
                <VisualState x:Name="TextEntryGridCollapsed" />
                <VisualState x:Name="TextEntryGridVisible">
                  <VisualState.Setters>
                    <Setter Target="TextEntryGrid.Visibility" Value="Visible" />
                    <Setter Target="MoreGlyph.Glyph" Value="&#xE70E;" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ColorChannelTextInputVisibility">
                <VisualState x:Name="ColorChannelTextInputVisible" />
                <VisualState x:Name="ColorChannelTextInputCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ColorRepresentationComboBox.Visibility" Value="Collapsed" />
                    <Setter Target="ColorChannelTextInputPanel.Visibility" Value="Collapsed" />
                    <Setter Target="HexTextBox.(Grid.Column)" Value="0" />
                    <Setter Target="HexTextBox.HorizontalAlignment" Value="Left" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AlphaTextInputVisibility">
                <VisualState x:Name="AlphaTextInputVisible" />
                <VisualState x:Name="AlphaTextInputCollapsed">
                  <VisualState.Setters>
                    <Setter Target="AlphaPanel.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ColorRepresentationSelected">
                <VisualState x:Name="RgbSelected" />
                <VisualState x:Name="HsvSelected">
                  <VisualState.Setters>
                    <Setter Target="RgbPanel.Visibility" Value="Collapsed" />
                    <Setter Target="HsvPanel.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HexInputVisibility">
                <VisualState x:Name="HexInputVisible" />
                <VisualState x:Name="HexInputCollapsed">
                  <VisualState.Setters>
                    <Setter Target="HexTextBox.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AlphaEnabledState">
                <VisualState x:Name="AlphaDisabled" />
                <VisualState x:Name="AlphaEnabled">
                  <VisualState.Setters>
                    <Setter Target="HexTextBox.MaxLength" Value="9" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel>
              <Grid x:Name="ColorSpectrumGrid">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <primitives:ColorSpectrum x:Name="ColorSpectrum" Grid.Column="0" Grid.Row="0" MaxWidth="336" MaxHeight="336" MinWidth="256" MinHeight="256" MinHue="{TemplateBinding MinHue}" MaxHue="{TemplateBinding MaxHue}" MinSaturation="{TemplateBinding MinSaturation}" MaxSaturation="{TemplateBinding MaxSaturation}" MinValue="{TemplateBinding MinValue}" MaxValue="{TemplateBinding MaxValue}" Shape="{TemplateBinding ColorSpectrumShape}" Components="{TemplateBinding ColorSpectrumComponents}" />
                <Grid x:Name="ColorPreviewRectangleGrid" Grid.Column="1" Grid.Row="0" Width="44" Margin="12,0,0,0">
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Rectangle VerticalAlignment="Stretch" Grid.ColumnSpan="2" Grid.RowSpan="2" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.Fill>
                      <ImageBrush x:Name="ColorPreviewRectangleCheckeredBackgroundImageBrush" />
                    </Rectangle.Fill>
                  </Rectangle>
                  <Rectangle x:Name="ColorPreviewRectangle" VerticalAlignment="Stretch" Grid.ColumnSpan="2" Grid.RowSpan="2" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Rectangle x:Name="PreviousColorRectangle" VerticalAlignment="Stretch" Grid.ColumnSpan="2" Grid.Row="1" Visibility="Collapsed" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Rectangle x:Name="BorderRectangle" Style="{StaticResource ColorPickerBorderStyle}" Grid.RowSpan="2" Grid.ColumnSpan="2" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                </Grid>
              </Grid>
              <Grid Margin="0,12,0,0" x:Name="ThirdDimensionSliderGrid">
                <Rectangle Height="11" VerticalAlignment="Center" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                  <Rectangle.Fill>
                    <LinearGradientBrush x:Name="ThirdDimensionSliderGradientBrush" />
                  </Rectangle.Fill>
                </Rectangle>
                <primitives:ColorPickerSlider x:Name="ThirdDimensionSlider" Minimum="0" Maximum="100" ColorChannel="Value" Style="{StaticResource ColorPickerSliderStyle}" IsThumbToolTipEnabled="False" />
              </Grid>
              <Grid Margin="0,12,0,0" x:Name="AlphaSliderGrid">
                <Rectangle Height="11" VerticalAlignment="Center" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                  <Rectangle.Fill>
                    <ImageBrush x:Name="AlphaSliderCheckeredBackgroundImageBrush" />
                  </Rectangle.Fill>
                </Rectangle>
                <Rectangle x:Name="AlphaSliderBackgroundRectangle" Height="11" VerticalAlignment="Center" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                  <Rectangle.Fill>
                    <LinearGradientBrush x:Name="AlphaSliderGradientBrush" />
                  </Rectangle.Fill>
                </Rectangle>
                <primitives:ColorPickerSlider x:Name="AlphaSlider" Minimum="0" Maximum="100" ColorChannel="Alpha" Style="{StaticResource ColorPickerSliderStyle}" IsThumbToolTipEnabled="False" />
              </Grid>
              <ToggleButton x:Name="MoreButton" MinHeight="32" MinWidth="120" Margin="0,12,0,0" Padding="0" HorizontalAlignment="Right" HorizontalContentAlignment="Right">
                <ToggleButton.Content>
                  <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,5,0,7">
                    <TextBlock x:Name="MoreButtonLabel" VerticalAlignment="Center" />
                    <FontIcon x:Name="MoreGlyph" Margin="8,0,0,0" FontFamily="{ThemeResource SymbolThemeFontFamily}" Glyph="&#xE70D;" FontSize="12" />
                  </StackPanel>
                </ToggleButton.Content>
                <ToggleButton.Resources>
                  <ResourceDictionary>
                    <ResourceDictionary.ThemeDictionaries>
                      <ResourceDictionary x:Key="Default">
                        <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForeground" Color="{ThemeResource SystemBaseHighColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundChecked" Color="{ThemeResource SystemBaseHighColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                      </ResourceDictionary>
                      <ResourceDictionary x:Key="HighContrast">
                        <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="{ThemeResource SystemColorButtonTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForeground" Color="{ThemeResource SystemColorButtonTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="{ThemeResource SystemColorButtonTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundChecked" Color="{ThemeResource SystemColorButtonTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPointerOver" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPressed" Color="{ThemeResource SystemColorHighlightColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedDisabled" Color="{ThemeResource SystemColorGrayTextColor}" />
                      </ResourceDictionary>
                      <ResourceDictionary x:Key="Light">
                        <SolidColorBrush x:Key="ToggleButtonBackground" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrush" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForeground" Color="{ThemeResource SystemBaseHighColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundChecked" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushChecked" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundChecked" Color="{ThemeResource SystemBaseHighColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPointerOver" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPointerOver" Color="{ThemeResource SystemBaseMediumColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedPressed" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedPressed" Color="{ThemeResource SystemBaseMediumLowColor}" />
                        <SolidColorBrush x:Key="ToggleButtonBackgroundCheckedDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonBorderBrushCheckedDisabled" Color="Transparent" />
                        <SolidColorBrush x:Key="ToggleButtonForegroundCheckedDisabled" Color="{ThemeResource SystemBaseMediumLowColor}" />
                      </ResourceDictionary>
                    </ResourceDictionary.ThemeDictionaries>
                  </ResourceDictionary>
                </ToggleButton.Resources>
              </ToggleButton>
              <Grid x:Name="TextEntryGrid" Visibility="Collapsed">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="Auto" />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ComboBox Grid.Row="0" x:Name="ColorRepresentationComboBox" Width="120" Margin="0,12,0,0">
                  <ComboBoxItem x:Name="RGBComboBoxItem" Content="RGB" IsSelected="True" />
                  <ComboBoxItem x:Name="HSVComboBoxItem" Content="HSV" />
                </ComboBox>
                <StackPanel Grid.Row="1" Grid.ColumnSpan="2">
                  <StackPanel x:Name="ColorChannelTextInputPanel">
                    <StackPanel x:Name="RgbPanel">
                      <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                        <TextBox x:Name="RedTextBox" Width="120" MaxLength="3" Text="255" />
                        <TextBlock x:Name="RedLabel" Text="Red" VerticalAlignment="Center" Margin="8,0,0,0" />
                      </StackPanel>
                      <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                        <TextBox x:Name="GreenTextBox" Width="120" MaxLength="3" Text="255" />
                        <TextBlock x:Name="GreenLabel" Text="Green" VerticalAlignment="Center" Margin="8,0,0,0" />
                      </StackPanel>
                      <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                        <TextBox x:Name="BlueTextBox" Width="120" MaxLength="3" Text="255" />
                        <TextBlock x:Name="BlueLabel" Text="Blue" VerticalAlignment="Center" Margin="8,0,0,0" />
                      </StackPanel>
                    </StackPanel>
                    <StackPanel x:Name="HsvPanel" Grid.Row="1" Visibility="Collapsed">
                      <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                        <TextBox x:Name="HueTextBox" Width="120" MaxLength="3" Text="0" />
                        <TextBlock x:Name="HueLabel" Text="Hue" VerticalAlignment="Center" Margin="8,0,0,0" />
                      </StackPanel>
                      <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                        <TextBox x:Name="SaturationTextBox" Width="120" MaxLength="3" Text="0" />
                        <TextBlock x:Name="SaturationLabel" Text="Saturation" VerticalAlignment="Center" Margin="8,0,0,0" />
                      </StackPanel>
                      <StackPanel Orientation="Horizontal" Margin="0,12,0,0">
                        <TextBox x:Name="ValueTextBox" Width="120" MaxLength="3" Text="100" />
                        <TextBlock x:Name="ValueLabel" Text="Value" VerticalAlignment="Center" Margin="8,0,0,0" />
                      </StackPanel>
                    </StackPanel>
                  </StackPanel>
                  <StackPanel x:Name="AlphaPanel" Orientation="Horizontal" Margin="0,12,0,0">
                    <TextBox x:Name="AlphaTextBox" Width="120" MaxLength="4" Text="100%" />
                    <TextBlock x:Name="AlphaLabel" Text="Opacity" VerticalAlignment="Center" Margin="8,0,0,0" />
                  </StackPanel>
                </StackPanel>
                <TextBox x:Name="HexTextBox" Grid.Column="1" MaxLength="7" Text="#FFFFFF" Margin="0,12,0,0" Width="132" HorizontalAlignment="Right" VerticalAlignment="Top" />
              </Grid>
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:ColorSpectrum">
    <Setter Property="ManipulationMode" Value="None" />
    <Setter Property="UseSystemFocusVisuals" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:ColorSpectrum">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="SelectionEllipse.Opacity" Value="0.8" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="PressedLarge">
                  <VisualState.Setters>
                    <Setter Target="SelectionEllipsePanel.Width" Value="48" />
                    <Setter Target="SelectionEllipsePanel.Height" Value="48" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionEllipseColor">
                <VisualState x:Name="SelectionEllipseLight" />
                <VisualState x:Name="SelectionEllipseDark">
                  <VisualState.Setters>
                    <Setter Target="FocusEllipse.Stroke" Value="{ThemeResource SystemControlBackgroundChromeWhiteBrush}" />
                    <Setter Target="SelectionEllipse.Stroke" Value="{ThemeResource SystemControlBackgroundChromeBlackHighBrush}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ShapeSelected">
                <VisualState x:Name="BoxSelected" />
                <VisualState x:Name="RingSelected">
                  <VisualState.Setters>
                    <Setter Target="SpectrumRectangle.Visibility" Value="Collapsed" />
                    <Setter Target="SpectrumOverlayRectangle.Visibility" Value="Collapsed" />
                    <Setter Target="RectangleBorder.Visibility" Value="Collapsed" />
                    <Setter Target="SpectrumEllipse.Visibility" Value="Visible" />
                    <Setter Target="SpectrumOverlayEllipse.Visibility" Value="Visible" />
                    <Setter Target="EllipseBorder.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Unfocused" />
                <VisualState x:Name="Focused">
                  <VisualState.Setters>
                    <Setter Target="FocusEllipse.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerFocused" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="SizingGrid" HorizontalAlignment="Center" VerticalAlignment="Center">
              <Grid.Clip>
                <RectangleGeometry />
              </Grid.Clip>
              <Rectangle x:Name="SpectrumRectangle" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              <Rectangle x:Name="SpectrumOverlayRectangle" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              <Ellipse x:Name="SpectrumEllipse" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />
              <Ellipse x:Name="SpectrumOverlayEllipse" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />
              <Canvas x:Name="InputTarget" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Control.IsTemplateFocusTarget="True">
                <Grid x:Name="SelectionEllipsePanel" Width="16" Height="16">
                  <Ellipse x:Name="FocusEllipse" Stroke="{ThemeResource SystemControlBackgroundChromeBlackHighBrush}" Margin="-2" StrokeThickness="2" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Collapsed" />
                  <Ellipse x:Name="SelectionEllipse" Stroke="{ThemeResource SystemControlBackgroundChromeWhiteBrush}" StrokeThickness="2" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <ToolTipService.ToolTip>
                      <ToolTip x:Name="ColorNameToolTip" VerticalOffset="20" />
                    </ToolTipService.ToolTip>
                  </Ellipse>
                </Grid>
              </Canvas>
              <Rectangle x:Name="RectangleBorder" Style="{StaticResource ColorPickerBorderStyle}" IsHitTestVisible="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
              <Ellipse x:Name="EllipseBorder" Style="{StaticResource ColorPickerBorderStyle}" IsHitTestVisible="False" Visibility="Collapsed" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-0.5,-0.5,-1.5,-1.5" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:PersonPicture" BasedOn="{StaticResource DefaultPersonPictureStyle}" />
  <Style x:Key="DefaultPersonPictureStyle" TargetType="controls:PersonPicture">
    <Setter Property="Foreground" Value="{ThemeResource PersonPictureForegroundThemeBrush}" />
    <Setter Property="Width" Value="100" />
    <Setter Property="Height" Value="100" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="SemiLight" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:PersonPicture">
          <Grid x:Name="RootGrid">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <!-- Visual State when a Photo is available for display -->
                <VisualState x:Name="Photo">
                  <VisualState.Setters>
                    <Setter Target="PersonPictureEllipse.Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ActualImageBrush}" />
                  </VisualState.Setters>
                </VisualState>
                <!-- Visual State when no Photo is available (but there are initials).-->
                <VisualState x:Name="Initials" />
                <VisualState x:Name="NoPhotoOrInitials">
                  <VisualState.Setters>
                    <Setter Target="InitialsTextBlock.FontFamily" Value="Segoe MDL2 Assets" />
                    <!-- Placeholder symbol for 'Contact' (https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font) -->
                    <Setter Target="InitialsTextBlock.Text" Value="&#xE77B;" />
                  </VisualState.Setters>
                </VisualState>
                <!-- Visual State when in Group mode -->
                <VisualState x:Name="Group">
                  <VisualState.Setters>
                    <Setter Target="InitialsTextBlock.FontFamily" Value="Segoe MDL2 Assets" />
                    <!-- Placeholder symbol for 'People' (https://docs.microsoft.com/en-us/windows/uwp/design/style/segoe-ui-symbol-font) -->
                    <Setter Target="InitialsTextBlock.Text" Value="&#xE716;" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="BadgeStates">
                <VisualState x:Name="NoBadge" />
                <VisualState x:Name="BadgeWithoutImageSource">
                  <VisualState.Setters>
                    <Setter Target="BadgeGrid.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BadgeWithImageSource">
                  <VisualState.Setters>
                    <Setter Target="BadgeGrid.Visibility" Value="Visible" />
                    <Setter Target="BadgingEllipse.Opacity" Value="{ThemeResource PersonPictureEllipseBadgeImageSourceStrokeOpacity}" />
                    <Setter Target="BadgingEllipse.Fill">
                      <Setter.Value>
                        <ImageBrush x:Name="BadgeImageBrush" Stretch="UniformToFill" />
                      </Setter.Value>
                    </Setter>
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Ellipse Fill="{ThemeResource PersonPictureEllipseFillThemeBrush}" Stroke="{ThemeResource SystemColorButtonTextColor}" StrokeThickness="{ThemeResource PersonPictureEllipseStrokeThickness}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
            <TextBlock x:Name="InitialsTextBlock" AutomationProperties.AccessibilityView="Raw" FontSize="36" FontFamily="{TemplateBinding FontFamily}" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" TextLineBounds="Tight" VerticalAlignment="Center" HorizontalAlignment="Center" IsTextScaleFactorEnabled="False" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ActualInitials}" />
            <Ellipse x:Name="PersonPictureEllipse" x:DeferLoadStrategy="Lazy" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" FlowDirection="LeftToRight" />
            <Grid x:Name="BadgeGrid" Visibility="Collapsed" VerticalAlignment="Bottom" HorizontalAlignment="Right">
              <Ellipse x:Name="BadgingBackgroundEllipse" x:DeferLoadStrategy="Lazy" Opacity="{ThemeResource PersonPictureEllipseBadgeStrokeOpacity}" Fill="{ThemeResource PersonPictureEllipseBadgeFillThemeBrush}" Stroke="{ThemeResource PersonPictureEllipseBadgeStrokeThemeBrush}" StrokeThickness="{ThemeResource PersonPictureEllipseBadgeStrokeThickness}" />
              <Ellipse x:Name="BadgingEllipse" x:DeferLoadStrategy="Lazy" Opacity="0" FlowDirection="LeftToRight" />
              <TextBlock x:Name="BadgeNumberTextBlock" x:DeferLoadStrategy="Lazy" AutomationProperties.AccessibilityView="Raw" Foreground="{ThemeResource PersonPictureEllipseBadgeForegroundThemeBrush}" FontFamily="{TemplateBinding FontFamily}" FontWeight="{TemplateBinding FontWeight}" TextLineBounds="Tight" VerticalAlignment="Center" HorizontalAlignment="Center" IsTextScaleFactorEnabled="False" />
              <!-- Default font family to "Segoe MDL2 Assets" -->
              <FontIcon x:Name="BadgeGlyphIcon" x:DeferLoadStrategy="Lazy" AutomationProperties.AccessibilityView="Raw" Foreground="{ThemeResource PersonPictureEllipseBadgeForegroundThemeBrush}" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontWeight="{TemplateBinding FontWeight}" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:RefreshContainer" BasedOn="{StaticResource DefaultRefreshContainerStyle}" />
  <Style x:Key="DefaultRefreshContainerStyle" TargetType="controls:RefreshContainer">
    <Setter Property="Foreground" Value="{ThemeResource RefreshContainerForegroundBrush}" />
    <Setter Property="Background" Value="{ThemeResource RefreshContainerBackgroundBrush}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RefreshContainer">
          <Grid x:Name="Root" Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" Background="Transparent" />
            <Grid x:Name="RefreshVisualizerPresenter" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:RefreshVisualizer">
    <Setter Property="Background" Value="{ThemeResource RefreshVisualizerBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource RefreshVisualizerForeground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Height" Value="100" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RefreshVisualizer">
          <Grid x:Name="Root" MinHeight="80" Background="{TemplateBinding Background}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:MenuBar" BasedOn="{StaticResource DefaultMenuBarStyle}" />
  <Style x:Key="DefaultMenuBarStyle" TargetType="controls:MenuBar">
    <Setter Property="Background" Value="{ThemeResource MenuBarBackground}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Height" Value="{StaticResource MenuBarHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:MenuBar">
          <Grid x:Name="LayoutRoot" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch">
            <ItemsControl x:Name="ContentRoot" VerticalAlignment="Stretch" HorizontalAlignment="Left" IsTabStop="False">
              <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                  <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
              </ItemsControl.ItemsPanel>
            </ItemsControl>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:MenuBarItem">
    <Setter Property="Background" Value="{ThemeResource MenuBarItemBackground}" />
    <Setter Property="BorderThickness" Value="{ThemeResource MenuBarItemBorderThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource MenuBarItemBorderBrush}" />
    <Setter Property="Title" Value="Item" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:MenuBarItem">
          <Grid x:Name="ContentRoot" Background="{TemplateBinding Background}">
            <Grid.Resources>
              <!-- Stop the contained button from setting its background to anything but transparent -->
              <!-- Can't do this because of : Bug 16889199: StaticResource tag in a ControlTemplate hits asserts in CHK build-->
              <!--<StaticResource x:Key="ButtonBackground" ResourceKey="SystemControlTransparentBrush"/>
                            <StaticResource x:Key="ButtonBackgroundPointerOver" ResourceKey="SystemControlTransparentBrush"/>
                            <StaticResource x:Key="ButtonBackgroundPressed" ResourceKey="SystemControlTransparentBrush"/>
                            <StaticResource x:Key="ButtonBackgroundDisabled" ResourceKey="SystemControlTransparentBrush"/>-->
              <!-- Use SolidColorBrush instead for now. -->
              <SolidColorBrush x:Key="ButtonBackground" Color="Transparent" />
              <SolidColorBrush x:Key="ButtonBackgroundPointerOver" Color="Transparent" />
              <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="Transparent" />
              <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="Transparent" />
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="Background.Background" Value="{ThemeResource MenuBarItemBackgroundPointerOver}" />
                    <Setter Target="Background.BorderBrush" Value="{ThemeResource MenuBarItemBorderBrushPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="Background.Background" Value="{ThemeResource MenuBarItemBackgroundPressed}" />
                    <Setter Target="Background.BorderBrush" Value="{ThemeResource MenuBarItemBorderBrushPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="Background.Background" Value="{ThemeResource MenuBarItemBackgroundSelected}" />
                    <Setter Target="Background.BorderBrush" Value="{ThemeResource MenuBarItemBorderBrushSelected}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="Background" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" />
            <Button x:Name="ContentButton" Content="{TemplateBinding Title}" Background="Transparent" BorderThickness="0" VerticalAlignment="Stretch" Padding="12,0,12,0" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <DataTemplate x:Key="TreeViewItemDataTemplate">
    <Grid Height="44">
      <TextBlock Text="{Binding Content}" HorizontalAlignment="Left" VerticalAlignment="Center" Style="{ThemeResource BodyTextBlockStyle}" />
    </Grid>
  </DataTemplate>
  <Style TargetType="controls:TreeView" BasedOn="{StaticResource DefaultTreeViewStyle}" />
  <Style x:Key="DefaultTreeViewStyle" TargetType="controls:TreeView">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CanDragItems" Value="True" />
    <Setter Property="CanReorderItems" Value="True" />
    <Setter Property="AllowDrop" Value="True" />
    <Setter Property="ItemContainerTransitions">
      <Setter.Value>
        <TransitionCollection>
          <ContentThemeTransition />
          <ReorderThemeTransition />
          <EntranceThemeTransition IsStaggeringEnabled="False" />
        </TransitionCollection>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TreeView">
          <controls:TreeViewList x:Name="ListControl" Background="{TemplateBinding Background}" ItemTemplate="{TemplateBinding ItemTemplate}" ItemTemplateSelector="{TemplateBinding ItemTemplateSelector}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" ItemContainerStyleSelector="{TemplateBinding ItemContainerStyleSelector}" ItemContainerTransitions="{TemplateBinding ItemContainerTransitions}" CanDragItems="{TemplateBinding CanDragItems}" AllowDrop="{TemplateBinding AllowDrop}" CanReorderItems="{TemplateBinding CanReorderItems}" />
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TreeViewItem" BasedOn="{StaticResource MUX_TreeViewItemStyle}" />
  <Style TargetType="controls:ScrollView" BasedOn="{StaticResource DefaultScrollViewStyle}" />
  <Style x:Key="DefaultScrollViewStyle" TargetType="controls:ScrollView">
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="ContentOrientation" Value="Vertical" />
    <Setter Property="HorizontalScrollChainMode" Value="Auto" />
    <Setter Property="HorizontalScrollMode" Value="Enabled" />
    <Setter Property="HorizontalScrollRailMode" Value="Enabled" />
    <Setter Property="VerticalScrollChainMode" Value="Auto" />
    <Setter Property="VerticalScrollMode" Value="Enabled" />
    <Setter Property="VerticalScrollRailMode" Value="Enabled" />
    <Setter Property="ZoomChainMode" Value="Auto" />
    <Setter Property="ZoomMode" Value="Disabled" />
    <Setter Property="IgnoredInputKinds" Value="None" />
    <Setter Property="MinZoomFactor" Value="0.1" />
    <Setter Property="MaxZoomFactor" Value="10.0" />
    <Setter Property="HorizontalAnchorRatio" Value="0.0" />
    <Setter Property="VerticalAnchorRatio" Value="0.0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ScrollView">
          <Grid x:Name="PART_Root">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ScrollingIndicatorStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="MouseIndicator" To="NoIndicator">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelay}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelay}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="TouchIndicator" To="NoIndicator">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsNoTouchDuration}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                        <DiscreteObjectKeyFrame KeyTime="{ThemeResource ScrollViewScrollBarsNoTouchDuration}">
                          <DiscreteObjectKeyFrame.Value>
                            <ScrollingIndicatorMode>None</ScrollingIndicatorMode>
                          </DiscreteObjectKeyFrame.Value>
                        </DiscreteObjectKeyFrame>
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="NoIndicator" />
                <VisualState x:Name="TouchIndicator">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>TouchIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>TouchIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseIndicator">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_HorizontalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>MouseIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_VerticalScrollBar" Storyboard.TargetProperty="IndicatorMode">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <ScrollingIndicatorMode>MouseIndicator</ScrollingIndicatorMode>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ScrollBarsSeparatorStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="ScrollBarsSeparatorExpanded" To="ScrollBarsSeparatorCollapsed">
                    <Storyboard>
                      <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorContractDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelay}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ScrollBarsSeparatorExpanded" To="ScrollBarsSeparatorCollapsedDisabled">
                    <Storyboard>
                      <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorContractDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelayDisabled}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="ScrollBarsSeparatorCollapsed" />
                <VisualState x:Name="ScrollBarsSeparatorCollapsedDisabled">
                  <Storyboard>
                    <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorContractDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelayDisabled}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorExpanded">
                  <Storyboard>
                    <DoubleAnimation Duration="{ThemeResource ScrollViewScrollBarsSeparatorExpandDuration}" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorExpandDelay}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorDisplayedWithoutAnimation">
                  <Storyboard>
                    <DoubleAnimation Duration="0" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorDisplayDelayWithoutAnimation}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorExpandedWithoutAnimation">
                  <Storyboard>
                    <DoubleAnimation Duration="0" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorExpandDelayWithoutAnimation}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ScrollBarsSeparatorCollapsedWithoutAnimation">
                  <Storyboard>
                    <DoubleAnimation Duration="0" BeginTime="{ThemeResource ScrollViewScrollBarsSeparatorContractDelayWithoutAnimation}" Storyboard.TargetName="PART_ScrollBarsSeparator" Storyboard.TargetProperty="Opacity" To="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <primitives:ScrollPresenter x:Name="PART_ScrollPresenter" Grid.ColumnSpan="2" Grid.RowSpan="2" Background="{TemplateBinding Background}" Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}" ContentOrientation="{TemplateBinding ContentOrientation}" HorizontalScrollChainMode="{TemplateBinding HorizontalScrollChainMode}" HorizontalScrollMode="{TemplateBinding HorizontalScrollMode}" HorizontalScrollRailMode="{TemplateBinding HorizontalScrollRailMode}" VerticalScrollChainMode="{TemplateBinding VerticalScrollChainMode}" VerticalScrollMode="{TemplateBinding VerticalScrollMode}" VerticalScrollRailMode="{TemplateBinding VerticalScrollRailMode}" ZoomChainMode="{TemplateBinding ZoomChainMode}" ZoomMode="{TemplateBinding ZoomMode}" IgnoredInputKinds="{TemplateBinding IgnoredInputKinds}" MinZoomFactor="{TemplateBinding MinZoomFactor}" MaxZoomFactor="{TemplateBinding MaxZoomFactor}" HorizontalAnchorRatio="{TemplateBinding HorizontalAnchorRatio}" VerticalAnchorRatio="{TemplateBinding VerticalAnchorRatio}" />
            <ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Stretch" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
            <ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="1" Orientation="Vertical" VerticalAlignment="Stretch" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
            <Border x:Name="PART_ScrollBarsSeparator" Grid.Row="1" Grid.Column="1" Opacity="0" Background="{ThemeResource ScrollViewScrollBarsSeparatorBackground}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultSwipeControlStyle" TargetType="controls:SwipeControl">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="MinHeight" Value="{ThemeResource ListViewItemMinHeight}" />
    <Setter Property="MinWidth" Value="{ThemeResource ListViewItemMinWidth}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:SwipeControl">
          <Grid x:Name="RootGrid">
            <Grid x:Name="SwipeContentRoot">
              <StackPanel x:Name="SwipeContentStackPanel" />
            </Grid>
            <Grid x:Name="ContentRoot">
              <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" AutomationProperties.AccessibilityView="Raw" />
              <Grid x:Name="InputEater" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:SwipeControl" BasedOn="{StaticResource DefaultSwipeControlStyle}" />
  <Style x:Key="DefaultTwoPaneViewStyle" TargetType="controls:TwoPaneView">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="MinWideModeWidth" Value="641" />
    <Setter Property="MinTallModeHeight" Value="641" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TwoPaneView">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ModeStates">
                <VisualState x:Name="ViewMode_LeftRight" />
                <VisualState x:Name="ViewMode_RightLeft">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.(Grid.Column)" Value="2" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_TopBottom">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane1.(Grid.Row)" Value="0" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane2.(Grid.Row)" Value="2" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_BottomTop">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane1.(Grid.Row)" Value="2" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                    <Setter Target="PART_Pane2.(Grid.Row)" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_OneOnly">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane2.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ViewMode_TwoOnly">
                  <VisualState.Setters>
                    <Setter Target="PART_Pane1.Visibility" Value="Collapsed" />
                    <Setter Target="PART_Pane2.(Grid.Column)" Value="0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PART_ColumnLeft" Width="Auto" />
              <ColumnDefinition x:Name="PART_ColumnMiddle" Width="0" />
              <ColumnDefinition x:Name="PART_ColumnRight" Width="*" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="PART_RowTop" Height="*" />
              <RowDefinition x:Name="PART_RowMiddle" Height="0" />
              <RowDefinition x:Name="PART_RowBottom" Height="0" />
            </Grid.RowDefinitions>
            <Border x:Name="PART_Pane1" Grid.Column="0" Child="{TemplateBinding Pane1}" />
            <Border x:Name="PART_Pane2" Grid.Column="2" Child="{TemplateBinding Pane2}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TwoPaneView" BasedOn="{StaticResource DefaultTwoPaneViewStyle}" />
  <Style x:Key="SplitButtonStyle" TargetType="controls:SplitButton">
    <Setter Property="Background" Value="{ThemeResource SplitButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource SplitButtonForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource SplitButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource SplitButtonBorderThemeThickness}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="IsTabStop" Value="True" />
    <Setter Property="Padding" Value="{ThemeResource ButtonPadding}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:SplitButton">
          <Grid x:Name="RootGrid" Background="Transparent" CornerRadius="{ThemeResource ControlCornerRadius}">
            <Grid.Resources>
              <!-- Override the style of the inner buttons so that they don't affect background/foreground/border colors -->
              <Style TargetType="Button">
                <Setter Property="Foreground" Value="{ThemeResource SplitButtonForeground}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="BorderThickness" Value="{ThemeResource SplitButtonBorderThemeThickness}" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
                <Setter Property="FontWeight" Value="Normal" />
                <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
                <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
                <Setter Property="FocusVisualMargin" Value="-3" />
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid x:Name="RootGrid" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="Disabled">
                              <VisualState.Setters>
                                <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource SplitButtonForegroundDisabled}" />
                              </VisualState.Setters>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter x:Name="ContentPresenter" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="FlyoutOpen">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TouchPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PrimaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPointerOver}" />
                    <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPointerOver}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPointerOver}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PrimaryPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SecondaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPointerOver}" />
                    <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPointerOver}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SecondaryPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackground}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundPressed}" />
                    <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Checked">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedFlyoutOpen">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedTouchPressed">
                  <VisualState.Setters>
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPrimaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPointerOver}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPointerOver}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedPrimaryPressed">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="PrimaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedSecondaryPointerOver">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPointerOver}" />
                    <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPointerOver}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CheckedSecondaryPressed">
                  <VisualState.Setters>
                    <Setter Target="Border.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushChecked}" />
                    <Setter Target="PrimaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundChecked}" />
                    <Setter Target="PrimaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundChecked}" />
                    <Setter Target="SecondaryBackgroundGrid.Background" Value="{ThemeResource SplitButtonBackgroundCheckedPressed}" />
                    <Setter Target="SecondaryButton.BorderBrush" Value="{ThemeResource SplitButtonBorderBrushCheckedPressed}" />
                    <Setter Target="SecondaryButton.Foreground" Value="{ThemeResource SplitButtonForegroundCheckedPressed}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SecondaryButtonPlacementStates">
                <VisualState x:Name="SecondaryButtonRight" />
                <VisualState x:Name="SecondaryButtonSpan">
                  <VisualState.Setters>
                    <Setter Target="SecondaryButton.(Grid.Column)" Value="0" />
                    <Setter Target="SecondaryButton.(Grid.ColumnSpan)" Value="3" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="PrimaryButtonColumn" Width="*" MinWidth="{ThemeResource SplitButtonPrimaryButtonSize}" />
              <ColumnDefinition x:Name="Separator" Width="1" />
              <ColumnDefinition x:Name="SecondaryButtonColumn" Width="{ThemeResource SplitButtonSecondaryButtonSize}" />
            </Grid.ColumnDefinitions>
            <Grid x:Name="PrimaryBackgroundGrid" Background="{TemplateBinding Background}" />
            <Grid x:Name="SecondaryBackgroundGrid" Background="{TemplateBinding Background}" Grid.Column="2" />
            <Grid x:Name="Border" Grid.ColumnSpan="3" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
            <Button x:Name="PrimaryButton" Grid.Column="0" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" />
            <Button x:Name="SecondaryButton" Grid.Column="2" Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="Transparent" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Padding="0,0,9,0" IsTabStop="False" AutomationProperties.AccessibilityView="Raw">
              <Button.Content>
                <TextBlock FontFamily="Segoe MDL2 Assets" FontSize="12" Text="&#xE70D;" VerticalAlignment="Center" HorizontalAlignment="Right" IsTextScaleFactorEnabled="False" AutomationProperties.AccessibilityView="Raw" />
              </Button.Content>
            </Button>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:SplitButton" BasedOn="{StaticResource SplitButtonStyle}" />
  <Style TargetType="controls:ToggleSplitButton" BasedOn="{StaticResource SplitButtonStyle}" />
  <Style x:Key="DefaultDropDownButtonStyle" TargetType="controls:DropDownButton">
    <Setter Property="Background" Value="{ThemeResource ButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource ButtonForeground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource ButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource ButtonBorderThemeThickness}" />
    <Setter Property="Padding" Value="{StaticResource ButtonPadding}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="RootGrid" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerGrid" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <PointerUpThemeAnimation Storyboard.TargetName="RootGrid" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerGrid" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <PointerDownThemeAnimation Storyboard.TargetName="RootGrid" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="InnerGrid" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ChevronTextBlock" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource ButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="InnerGrid" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="ContentPresenter" Content="{TemplateBinding Content}" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
              <TextBlock x:Name="ChevronTextBlock" Grid.Column="1" FontFamily="Segoe MDL2 Assets" FontSize="12" Text="&#xE70D;" VerticalAlignment="Center" Margin="6,0,0,0" IsTextScaleFactorEnabled="False" AutomationProperties.AccessibilityView="Raw" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:DropDownButton" BasedOn="{StaticResource DefaultDropDownButtonStyle}" />
  <Style TargetType="controls:RadioButtons" BasedOn="{StaticResource DefaultRadioButtonsStyle}" />
  <Style x:Key="DefaultRadioButtonsStyle" TargetType="controls:RadioButtons">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:RadioButtons">
          <StackPanel>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.Foreground" Value="{ThemeResource RadioButtonsHeaderForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="HeaderContentPresenter" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" Foreground="{ThemeResource RadioButtonsHeaderForeground}" Margin="{ThemeResource RadioButtonsTopHeaderMargin}" />
            <controls:ItemsRepeater x:Name="InnerRepeater">
              <controls:ItemsRepeater.Layout>
                <primitives:ColumnMajorUniformToLargestGridLayout MaxColumns="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=MaxColumns}" ColumnSpacing="{ThemeResource RadioButtonsColumnSpacing}" RowSpacing="{ThemeResource RadioButtonsRowSpacing}" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
          </StackPanel>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="RadioButton" BasedOn="{StaticResource DefaultRadioButtonStyle}" />
  <Style TargetType="controls:TeachingTip" BasedOn="{StaticResource DefaultTeachingTipStyle}" />
  <Style x:Key="DefaultTeachingTipStyle" TargetType="controls:TeachingTip">
    <Setter Property="Background" Value="{ThemeResource TeachingTipBackgroundBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource TeachingTipForegroundBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TeachingTipBorderBrush}" />
    <Setter Property="ActionButtonStyle" Value="{ThemeResource DefaultButtonStyle}" />
    <Setter Property="CloseButtonStyle" Value="{ThemeResource DefaultButtonStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TeachingTip">
          <Border x:Name="Container" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="LightDismissStates">
                <VisualState x:Name="LightDismiss">
                  <VisualState.Setters>
                    <Setter Target="TailEdgeBorder.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="TailPolygon.Fill" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="TopTailPolygonHighlight.Fill" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="ContentRootGrid.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="MainContentPresenter.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                    <Setter Target="HeroContentBorder.Background" Value="{ThemeResource TeachingTipTransientBackground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NormalDismiss" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonsStates">
                <VisualState x:Name="NoButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                    <Setter Target="ActionButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ActionButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                    <Setter Target="ActionButton.Visibility" Value="Visible" />
                    <Setter Target="ActionButton.(Grid.Column)" Value="1" />
                    <Setter Target="ActionButton.Margin" Value="{StaticResource TeachingTipRightButtonMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="CloseButtonVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Visible" />
                    <Setter Target="CloseButton.Margin" Value="{StaticResource TeachingTipRightButtonMargin}" />
                    <Setter Target="ActionButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BothButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Visible" />
                    <Setter Target="CloseButton.Margin" Value="{StaticResource TeachingTipRightButtonMargin}" />
                    <Setter Target="ActionButton.Visibility" Value="Visible" />
                    <Setter Target="ActionButton.(Grid.Column)" Value="0" />
                    <Setter Target="ActionButton.Margin" Value="{StaticResource TeachingTipLeftButtonMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ContentStates">
                <VisualState x:Name="Content">
                  <VisualState.Setters>
                    <Setter Target="MainContentPresenter.Margin" Value="{StaticResource TeachingTipMainContentPresentMargin}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoContent">
                  <VisualState.Setters>
                    <Setter Target="MainContentPresenter.Margin" Value="{StaticResource TeachingTipMainContentAbsentMargin}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CloseButtonLocations">
                <VisualState x:Name="HeaderCloseButton">
                  <VisualState.Setters>
                    <Setter Target="TitlesStackPanel.Margin" Value="{StaticResource TeachingTipTitleStackPanelMarginWithHeaderCloseButton}" />
                    <Setter Target="AlternateCloseButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FooterCloseButton">
                  <VisualState.Setters>
                    <Setter Target="TitlesStackPanel.Margin" Value="{StaticResource TeachingTipTitleStackPanelMarginWithFooterCloseButton}" />
                    <Setter Target="AlternateCloseButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="Icon">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Margin" Value="{StaticResource TeachingTipIconPresenterMarginWithIcon}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoIcon">
                  <VisualState.Setters>
                    <Setter Target="IconPresenter.Margin" Value="{StaticResource TeachingTipIconPresenterMarginWithoutIcon}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="HeroContentPlacementStates">
                <VisualState x:Name="HeroContentTop">
                  <VisualState.Setters>
                    <Setter Target="HeroContentBorder.(Grid.Row)" Value="0" />
                    <Setter Target="HeroContentBorder.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="HeroContentBottom">
                  <VisualState.Setters>
                    <Setter Target="HeroContentBorder.(Grid.Row)" Value="2" />
                    <Setter Target="HeroContentBorder.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PlacementStates">
                <VisualState x:Name="Top">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessTop}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Top" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10, 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Bottom">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessBottom}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="0" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Visible" />
                    <Setter Target="TopTailPolygonHighlight.HorizontalAlignment" Value="Center" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,10 10,0 20,10" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="0" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginBottom}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Left">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessLeft}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailEdgeBorder.Height" Value="Auto" />
                    <Setter Target="TailEdgeBorder.Width" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource LeftThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 0,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="4" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Right">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessRight}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailEdgeBorder.Height" Value="Auto" />
                    <Setter Target="TailEdgeBorder.Width" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="0" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource RightThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="10,0 0,10 10,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="0" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopRight">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessTop}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Top" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TopLeft">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessTop}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Top" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BottomRight">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessBottom}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="0" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Visible" />
                    <Setter Target="TopTailPolygonHighlight.HorizontalAlignment" Value="Left" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,10 10,0 20,10" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="0" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginBottom}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="BottomLeft">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessBottom}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="0" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Visible" />
                    <Setter Target="TopTailPolygonHighlight.HorizontalAlignment" Value="Right" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,10 10,0 20,10" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="0" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginBottom}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LeftTop">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessLeft}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailEdgeBorder.Height" Value="Auto" />
                    <Setter Target="TailEdgeBorder.Width" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource LeftThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 0,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="4" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LeftBottom">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessLeft}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailEdgeBorder.Height" Value="Auto" />
                    <Setter Target="TailEdgeBorder.Width" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource LeftThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10 0,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="4" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginLeft}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="RightTop">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessRight}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailEdgeBorder.Height" Value="Auto" />
                    <Setter Target="TailEdgeBorder.Width" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="0" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource RightThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="10,0 0,10 10,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="0" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="RightBottom">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessRight}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Right" />
                    <Setter Target="TailEdgeBorder.Height" Value="Auto" />
                    <Setter Target="TailEdgeBorder.Width" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="0" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource RightThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="10,0 0,10 10,20" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="2" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="0" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Left" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Top" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginRight}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Center">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessTop}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Visible" />
                    <Setter Target="TailEdgeBorder.VerticalAlignment" Value="Top" />
                    <Setter Target="TailEdgeBorder.HorizontalAlignment" Value="Stretch" />
                    <Setter Target="TailEdgeBorder.Height" Value="{StaticResource TeachingTipBorderThickness}" />
                    <Setter Target="TailEdgeBorder.Width" Value="Auto" />
                    <Setter Target="TailEdgeBorder.(Grid.Row)" Value="4" />
                    <Setter Target="TailEdgeBorder.(Grid.Column)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.RowSpan)" Value="1" />
                    <Setter Target="TailEdgeBorder.(Grid.ColumnSpan)" Value="3" />
                    <Setter Target="TailEdgeBorder.Margin" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopThicknessFilterConverter}}" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Visible" />
                    <Setter Target="TailPolygon.Points" Value="0,0 10,10, 20,0" />
                    <Setter Target="TailPolygon.(Grid.Row)" Value="4" />
                    <Setter Target="TailPolygon.(Grid.Column)" Value="2" />
                    <Setter Target="TailPolygon.HorizontalAlignment" Value="Center" />
                    <Setter Target="TailPolygon.VerticalAlignment" Value="Bottom" />
                    <Setter Target="TailPolygon.Margin" Value="{StaticResource TeachingTipTailPolygonMarginTop}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Untargeted">
                  <VisualState.Setters>
                    <Setter Target="ContentRootGrid.BorderThickness" Value="{StaticResource TeachingTipContentBorderThicknessUntargeted}" />
                    <Setter Target="TailEdgeBorder.Visibility" Value="Collapsed" />
                    <Setter Target="TopTailPolygonHighlight.Visibility" Value="Collapsed" />
                    <Setter Target="TopHighlightRight.Visibility" Value="Collapsed" />
                    <Setter Target="TailPolygon.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid MinHeight="{ThemeResource TeachingTipMinHeight}" MinWidth="{ThemeResource TeachingTipMinWidth}" MaxHeight="{ThemeResource TeachingTipMaxHeight}" MaxWidth="{ThemeResource TeachingTipMaxWidth}" AutomationProperties.Name="{TemplateBinding AutomationProperties.Name}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
                <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
                <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                <RowDefinition Height="*" />
                <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
              </Grid.RowDefinitions>
              <!-- This TailEdgeBorder needs to be z ordered underneath the TailPolygon while the TailOcclusionGrid needs to be over it, hence declaring these parts
                                 in this order. This is to achieve the desired occlusion of the tail's content edge border. The tail edge border is a low opacity highlight,
                                 which means we need to have the background color present underneath the highlight, hence the double grid here. -->
              <Grid x:Name="TailEdgeBorder" Background="{TemplateBinding Background}">
                <Grid Background="{TemplateBinding BorderBrush}" />
              </Grid>
              <Polygon x:Name="TailPolygon" Fill="{TemplateBinding Background}" HorizontalAlignment="Left" VerticalAlignment="Top" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{StaticResource TeachingTipBorderThickness}" />
              <Grid x:Name="TailOcclusionGrid" HorizontalAlignment="Left" VerticalAlignment="Top" MinHeight="{ThemeResource TeachingTipMinHeight}" MinWidth="{ThemeResource TeachingTipMinWidth}" MaxHeight="{ThemeResource TeachingTipMaxHeight}" MaxWidth="{ThemeResource TeachingTipMaxWidth}" Grid.ColumnSpan="5" Grid.RowSpan="5">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
                  <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                  <ColumnDefinition Width="*" />
                  <ColumnDefinition Width="{StaticResource TeachingTipTailMargin}" />
                  <ColumnDefinition Width="{StaticResource TeachingTipTailShortSideLength}" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
                  <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                  <RowDefinition Height="*" />
                  <RowDefinition Height="{StaticResource TeachingTipTailMargin}" />
                  <RowDefinition Height="{StaticResource TeachingTipTailShortSideLength}" />
                </Grid.RowDefinitions>
                <Polygon x:Name="TopTailPolygonHighlight" Grid.Row="0" Grid.Column="2" Margin="{StaticResource TeachingTipTopHighlightOffsetForBorder}" VerticalAlignment="Top" Fill="{TemplateBinding Background}" Stroke="{ThemeResource TeachingTipTopHighlightBrush}" StrokeThickness="{StaticResource TeachingTipTopHighlightHeight}" Points="0,10 10,0 20,10" />
                <Grid x:Name="ContentRootGrid" AutomationProperties.LandmarkType="Custom" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" FlowDirection="{TemplateBinding FlowDirection}" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" Grid.RowSpan="3" CornerRadius="{ThemeResource OverlayCornerRadius}">
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <Border x:Name="HeroContentBorder" Grid.Row="0" Child="{TemplateBinding HeroContent}" Background="{TemplateBinding Background}" />
                  <Grid x:Name="NonHeroContentRootGrid" Grid.Row="1">
                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                      <StackPanel Margin="{StaticResource TeachingTipContentMargin}">
                        <Grid Grid.Row="0">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                          </Grid.ColumnDefinitions>
                          <ContentPresenter x:Name="IconPresenter" Grid.Column="0" Foreground="{TemplateBinding Foreground}">
                            <Border Child="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IconElement}" />
                          </ContentPresenter>
                          <StackPanel x:Name="TitlesStackPanel" Grid.Column="1">
                            <TextBlock x:Name="TitleTextBlock" Grid.Column="0" Text="{TemplateBinding Title}" TextWrapping="WrapWholeWords" Foreground="{ThemeResource TeachingTipTitleForegroundBrush}" FontFamily="{TemplateBinding FontFamily}" FontWeight="SemiBold" />
                            <TextBlock x:Name="SubtitleTextBlock" Grid.Row="1" Text="{TemplateBinding Subtitle}" Foreground="{ThemeResource TeachingTipSubtitleForegroundBrush}" FontFamily="{TemplateBinding FontFamily}" TextWrapping="WrapWholeWords" />
                          </StackPanel>
                        </Grid>
                        <ContentPresenter x:Name="MainContentPresenter" Grid.Row="1" Content="{TemplateBinding Content}" Background="{TemplateBinding Background}" Foreground="{TemplateBinding Foreground}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}" FontStretch="{TemplateBinding FontStretch}" />
                        <Grid Grid.Row="2">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                          </Grid.ColumnDefinitions>
                          <Button x:Name="ActionButton" HorizontalAlignment="Stretch" Content="{TemplateBinding ActionButtonContent}" Style="{TemplateBinding ActionButtonStyle}" Command="{TemplateBinding ActionButtonCommand}" CommandParameter="{TemplateBinding ActionButtonCommandParameter}" />
                          <Button x:Name="CloseButton" HorizontalAlignment="Stretch" Content="{TemplateBinding CloseButtonContent}" Style="{TemplateBinding CloseButtonStyle}" Command="{TemplateBinding CloseButtonCommand}" CommandParameter="{TemplateBinding CloseButtonCommandParameter}" Grid.Column="1" />
                        </Grid>
                      </StackPanel>
                    </ScrollViewer>
                    <Button x:Name="AlternateCloseButton" Width="{StaticResource TeachingTipAlternateCloseButtonSize}" Height="{StaticResource TeachingTipAlternateCloseButtonSize}" Background="Transparent" VerticalAlignment="Top" HorizontalAlignment="Right" BorderThickness="{ThemeResource TeachingTipAlternateCloseButtonBorderThickness}">
                      <Viewbox Width="{StaticResource TeachingTipAlternateCloseButtonGlyphSize}" Height="{StaticResource TeachingTipAlternateCloseButtonGlyphSize}">
                        <SymbolIcon Symbol="Cancel" />
                      </Viewbox>
                    </Button>
                  </Grid>
                </Grid>
                <Grid x:Name="TopHighlightLeft" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" Height="{StaticResource TeachingTipTopHighlightHeight}" VerticalAlignment="Top" HorizontalAlignment="Stretch" Background="{ThemeResource TeachingTipTopHighlightBrush}" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopLeftHighlightMargin}" />
                <Grid x:Name="TopHighlightRight" Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="3" Height="{StaticResource TeachingTipTopHighlightHeight}" VerticalAlignment="Top" HorizontalAlignment="Stretch" Background="{ThemeResource TeachingTipTopHighlightBrush}" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.TopRightHighlightMargin}" />
              </Grid>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TabView" BasedOn="{StaticResource DefaultTabViewStyle}" />
  <Style x:Key="DefaultTabViewStyle" TargetType="controls:TabView">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Padding" Value="{ThemeResource TabViewHeaderPadding}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Background" Value="{ThemeResource TabViewBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TabView">
          <Grid>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid x:Name="TabContainerGrid" Background="{TemplateBinding Background}" XYFocusKeyboardNavigation="Enabled">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" x:Name="LeftContentColumn" />
                <ColumnDefinition Width="Auto" x:Name="TabColumn" />
                <ColumnDefinition Width="Auto" x:Name="AddButtonColumn" />
                <ColumnDefinition Width="*" x:Name="RightContentColumn" />
              </Grid.ColumnDefinitions>
              <ContentPresenter Grid.Column="0" x:Name="LeftContentPresenter" Content="{TemplateBinding TabStripHeader}" ContentTemplate="{TemplateBinding TabStripHeaderTemplate}" />
              <Grid x:Name="ShadowReceiver" Grid.ColumnSpan="4" />
              <primitives:TabViewListView Grid.Column="1" x:Name="TabListView" CanReorderItems="{TemplateBinding CanReorderTabs}" CanDragItems="{TemplateBinding CanDragTabs}" AllowDrop="{TemplateBinding AllowDropTabs}" ItemsSource="{TemplateBinding TabItemsSource}" ItemTemplate="{TemplateBinding TabItemTemplate}" ItemTemplateSelector="{TemplateBinding TabItemTemplateSelector}" />
              <Button Grid.Column="2" x:Name="AddButton" Content="&#xE710;" VerticalAlignment="Stretch" IsTextScaleFactorEnabled="False" Command="{TemplateBinding AddTabButtonCommand}" CommandParameter="{TemplateBinding AddTabButtonCommandParameter}" Visibility="{Binding IsAddTabButtonVisible, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource TabViewButtonStyle}" HighContrastAdjustment="None" />
              <ContentPresenter Grid.Column="3" x:Name="RightContentPresenter" HorizontalAlignment="Stretch" Content="{TemplateBinding TabStripFooter}" ContentTemplate="{TemplateBinding TabStripFooterTemplate}" />
            </Grid>
            <!-- We don't want this to take space on the second row in case the user isn't using tab content. -->
            <Grid x:Name="ShadowCaster" Grid.Row="0" Height="10" Margin="0,0,0,-10" VerticalAlignment="Bottom" Background="Transparent" />
            <ContentPresenter x:Name="TabContentPresenter" Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:TabViewListView">
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="Padding" Value="{ThemeResource TabViewHeaderPadding}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="TabNavigation" Value="Once" />
    <Setter Property="IsSwipeEnabled" Value="False" />
    <Setter Property="SingleSelectionFollowsFocus" Value="False" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.HorizontalScrollMode" Value="Enabled" />
    <Setter Property="ScrollViewer.IsHorizontalRailEnabled" Value="False" />
    <Setter Property="ScrollViewer.VerticalScrollMode" Value="Disabled" />
    <Setter Property="ScrollViewer.IsVerticalRailEnabled" Value="False" />
    <Setter Property="ScrollViewer.ZoomMode" Value="Disabled" />
    <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
    <Setter Property="ScrollViewer.BringIntoViewOnFocusChange" Value="True" />
    <Setter Property="ItemContainerTransitions">
      <Setter.Value>
        <TransitionCollection>
          <AddDeleteThemeTransition />
          <ContentThemeTransition />
          <ReorderThemeTransition />
          <EntranceThemeTransition IsStaggeringEnabled="False" />
        </TransitionCollection>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <ItemsStackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:TabViewListView">
          <Border BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}">
            <ScrollViewer x:Name="ScrollViewer" Grid.Column="1" AutomationProperties.AccessibilityView="Raw" BringIntoViewOnFocusChange="{TemplateBinding ScrollViewer.BringIntoViewOnFocusChange}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsHorizontalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsHorizontalScrollChainingEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsVerticalScrollChainingEnabled="{TemplateBinding ScrollViewer.IsVerticalScrollChainingEnabled}" TabNavigation="{TemplateBinding TabNavigation}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" ZoomMode="{TemplateBinding ScrollViewer.ZoomMode}" Style="{StaticResource TabScrollViewerStyle}">
              <ItemsPresenter x:Name="TabsItemsPresenter" Padding="{TemplateBinding Padding}" />
            </ScrollViewer>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="TabScrollViewerStyle" TargetType="ScrollViewer">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Border x:Name="Root" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <RepeatButton x:Name="ScrollDecreaseButton" AutomationProperties.AccessibilityView="Raw" VerticalAlignment="Bottom" Width="{ThemeResource TabViewItemScrollButtonWidth}" Height="{ThemeResource TabViewItemScrollButtonHeight}" Padding="{ThemeResource TabViewItemScrollButtonPadding}" Background="{ThemeResource TabViewScrollButtonBackground}" BorderThickness="1" Delay="50" FontFamily="Segoe MDL2 Assets" Interval="100" Style="{StaticResource RepeatButtonRevealStyle}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" HighContrastAdjustment="None" Content="&#xE76B;" />
              <ScrollContentPresenter x:Name="ScrollContentPresenter" Grid.Column="1" Padding="1,0,0,0" TabFocusNavigation="Once" />
              <RepeatButton x:Name="ScrollIncreaseButton" AutomationProperties.AccessibilityView="Raw" Grid.Column="2" VerticalAlignment="Bottom" HorizontalAlignment="Center" Width="{ThemeResource TabViewItemScrollButtonWidth}" Height="{ThemeResource TabViewItemScrollButtonHeight}" Padding="{ThemeResource TabViewItemScrollButtonPadding}" Background="{ThemeResource TabViewScrollButtonBackground}" BorderThickness="1" Delay="50" FontFamily="Segoe MDL2 Assets" Interval="100" Style="{StaticResource RepeatButtonRevealStyle}" HighContrastAdjustment="None" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Content="&#xE76C;" />
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TabViewCloseButtonStyle" TargetType="Button">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Padding" Value="0" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="FocusVisualMargin" Value="-3" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter x:Name="ContentPresenter" AutomationProperties.AccessibilityView="Raw" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" CornerRadius="{ThemeResource ControlCornerRadius}" ContentTransitions="{TemplateBinding ContentTransitions}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewItemHeaderCloseButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <PointerDownThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </ContentPresenter>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="TabViewButtonStyle" TargetType="Button">
    <Setter Property="Background" Value="{ThemeResource TabViewButtonBackground}" />
    <Setter Property="Foreground" Value="{ThemeResource TabViewButtonForeground}" />
    <Setter Property="FontSize" Value="11" />
    <Setter Property="FontFamily" Value="Segoe MDL2 Assets" />
    <Setter Property="VerticalAlignment" Value="Bottom" />
    <Setter Property="Margin" Value="0,7,0,0" />
    <Setter Property="Padding" Value="10,10,10,11" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{ThemeResource ControlCornerRadius}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" FontWeight="SemiLight" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <PointerUpThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBackgroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonForegroundPressed}" />
                    </ObjectAnimationUsingKeyFrames>
                    <PointerDownThemeAnimation Storyboard.TargetName="ContentPresenter" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TabViewButtonForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </ContentPresenter>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:TabViewItem">
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="UseSystemFocusVisuals" Value="{StaticResource UseSystemFocusVisuals}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TabViewItem">
          <Grid x:Name="LayoutRoot" Padding="{TemplateBinding Padding}" Margin="-1,0,0,0">
            <!-- This item will cover the separator on its left side. -->
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="LeftColumn" Width="0" />
              <ColumnDefinition Width="*" />
              <ColumnDefinition x:Name="RightColumn" Width="0" />
            </Grid.ColumnDefinitions>
            <Grid.RenderTransform>
              <ScaleTransform x:Name="LayoutRootScale" />
            </Grid.RenderTransform>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundPointerOver}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundPointerOver}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderPointerOverCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderPointerOverCloseButtonForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundPressed}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundPressed}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderPressedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderPressedCloseButtonForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundSelected}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundSelected}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonForeground}" />
                    <Setter Target="LeftRadiusRender.Visibility" Value="Visible" />
                    <Setter Target="RightRadiusRender.Visibility" Value="Visible" />
                    <Setter Target="LayoutRoot.Background" Value="Transparent" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundPointerOver}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundPointerOver}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonForeground}" />
                    <Setter Target="LayoutRoot.Background" Value="Transparent" />
                    <Setter Target="LeftRadiusRender.Visibility" Value="Visible" />
                    <Setter Target="RightRadiusRender.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundPressed}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemIconForegroundPressed}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderSelectedCloseButtonForeground}" />
                    <Setter Target="LayoutRoot.Background" Value="Transparent" />
                    <Setter Target="LeftRadiusRender.Visibility" Value="Visible" />
                    <Setter Target="RightRadiusRender.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DisabledStates">
                <VisualState x:Name="Enabled" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="TabContainer.Background" Value="{ThemeResource TabViewItemHeaderBackgroundDisabled}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TabViewItemHeaderForegroundDisabled}" />
                    <Setter Target="IconControl.Foreground" Value="{ThemeResource TabViewButtonForegroundDisabled}" />
                    <Setter Target="CloseButton.Background" Value="{ThemeResource TabViewItemHeaderDisabledCloseButtonBackground}" />
                    <Setter Target="CloseButton.Foreground" Value="{ThemeResource TabViewItemHeaderDisabledCloseButtonForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DataVirtualizationStates">
                <VisualState x:Name="DataAvailable" />
                <VisualState x:Name="DataPlaceholder" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ReorderHintStates">
                <VisualState x:Name="NoReorderHint" />
                <VisualState x:Name="BottomReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Bottom" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="TopReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Top" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="RightReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Right" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="LeftReorderHint">
                  <Storyboard>
                    <DragOverThemeAnimation Direction="Left" ToOffset="{ThemeResource ListViewItemReorderHintThemeOffset}" TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.2" To="NoReorderHint" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="Dragging">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Opacity" To="{ThemeResource ListViewItemDragThemeOpacity}" Duration="0" />
                    <DragItemThemeAnimation TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DraggingTarget" />
                <VisualState x:Name="MultipleDraggingPrimary" />
                <VisualState x:Name="MultipleDraggingSecondary" />
                <VisualState x:Name="DraggedPlaceholder" />
                <VisualState x:Name="Reordering">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Opacity" To="{ThemeResource ListViewItemReorderThemeOpacity}" Duration="0:0:0.240" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ReorderingTarget">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="Opacity" To="{ThemeResource ListViewItemReorderTargetThemeOpacity}" Duration="0:0:0.240" />
                    <DoubleAnimation Storyboard.TargetName="LayoutRootScale" Storyboard.TargetProperty="ScaleX" To="{ThemeResource ListViewItemReorderTargetThemeScale}" Duration="0:0:0.240" />
                    <DoubleAnimation Storyboard.TargetName="LayoutRootScale" Storyboard.TargetProperty="ScaleY" To="{ThemeResource ListViewItemReorderTargetThemeScale}" Duration="0:0:0.240" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MultipleReorderingPrimary" />
                <VisualState x:Name="ReorderedPlaceholder">
                  <Storyboard>
                    <FadeOutThemeAnimation TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="DragOver">
                  <Storyboard>
                    <DropTargetItemThemeAnimation TargetName="LayoutRoot" />
                  </Storyboard>
                </VisualState>
                <VisualStateGroup.Transitions>
                  <VisualTransition GeneratedDuration="0:0:0.2" To="NotDragging" />
                </VisualStateGroup.Transitions>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="Icon" />
                <VisualState x:Name="NoIcon">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TabWidthModes">
                <VisualState x:Name="StandardWidth" />
                <VisualState x:Name="Compact">
                  <VisualState.Setters>
                    <Setter Target="IconBox.Margin" Value="0,0,0,0" />
                    <Setter Target="ContentPresenter.Visibility" Value="Collapsed" />
                    <Setter Target="IconColumn.Width" Value="{ThemeResource TabViewItemHeaderIconSize}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="CloseIconStates">
                <VisualState x:Name="CloseButtonVisible" />
                <VisualState x:Name="CloseButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Path x:Name="LeftRadiusRender" x:Load="False" Grid.Column="0" Visibility="Collapsed" VerticalAlignment="Bottom" Height="{Binding Source={ThemeResource OverlayCornerRadius}, Path=BottomLeft}" Margin="{Binding Source={ThemeResource OverlayCornerRadius},&#xD;&#xA;                                Converter={StaticResource TabViewLeftInsetCornerConverter}}" Stretch="Uniform" Fill="{ThemeResource TabViewItemHeaderBackgroundSelected}" Data="M4 0 L4 4 L0 4 A4,4 90 0 0 4 0 Z" />
            <Path x:Name="RightRadiusRender" x:Load="False" Grid.Column="2" Visibility="Collapsed" VerticalAlignment="Bottom" Height="{Binding Source={ThemeResource OverlayCornerRadius}, Path=BottomRight}" Margin="{Binding Source={ThemeResource OverlayCornerRadius},&#xD;&#xA;                                Converter={StaticResource TabViewRightInsetCornerConverter}}" Stretch="Uniform" Fill="{ThemeResource TabViewItemHeaderBackgroundSelected}" Data="M0 0 L0 4 L4 4 A4 4 90 0 1 0 0 Z" />
            <Border x:Name="TabSeparator" HorizontalAlignment="Right" Width="1" Grid.Column="1" BorderBrush="{ThemeResource TabViewItemSeparator}" BorderThickness="1" Margin="{ThemeResource TabViewItemSeparatorMargin}" />
            <Grid x:Name="TabContainer" Grid.Column="1" Background="{ThemeResource TabViewItemHeaderBackground}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Control.IsTemplateFocusTarget="True" Padding="{ThemeResource TabViewItemHeaderPadding}" CornerRadius="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" FocusVisualMargin="{TemplateBinding FocusVisualMargin}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="IconColumn" Width="Auto" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <Viewbox x:Name="IconBox" MaxWidth="{ThemeResource TabViewItemHeaderIconSize}" MaxHeight="{ThemeResource TabViewItemHeaderIconSize}" Margin="{ThemeResource TabViewItemHeaderIconMargin}">
                <ContentControl x:Name="IconControl" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TabViewTemplateSettings.IconElement}" IsTabStop="False" Foreground="{ThemeResource TabViewItemIconForeground}" HighContrastAdjustment="None" />
              </Viewbox>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" FontWeight="{TemplateBinding FontWeight}" FontSize="{ThemeResource TabViewItemHeaderFontSize}" Foreground="{ThemeResource TabViewItemHeaderForeground}" OpticalMarginAlignment="TrimSideBearings" HighContrastAdjustment="None" />
              <Button x:Name="CloseButton" Grid.Column="2" Width="{ThemeResource TabViewItemHeaderCloseButtonSize}" Height="{ThemeResource TabViewItemHeaderCloseButtonSize}" FontSize="{ThemeResource TabViewItemHeaderCloseFontSize}" Margin="{ThemeResource TabViewItemHeaderCloseMargin}" Content="&#xE711;" IsTextScaleFactorEnabled="False" IsTabStop="False" Background="{ThemeResource TabViewItemHeaderCloseButtonBackground}" Foreground="{ThemeResource TabViewItemHeaderCloseButtonForeground}" Style="{StaticResource TabViewCloseButtonStyle}" HighContrastAdjustment="None" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:ProgressBar">
    <Setter Property="Foreground" Value="{ThemeResource SystemControlHighlightAccentBrush}" />
    <Setter Property="Background" Value="{ThemeResource SystemControlBackgroundBaseLowBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource ProgressBarBorderThemeThickness}" />
    <Setter Property="BorderBrush" Value="{ThemeResource SystemControlHighlightTransparentBrush}" />
    <Setter Property="MinHeight" Value="{ThemeResource ProgressBarThemeMinHeight}" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ProgressBar">
          <Grid x:Name="LayoutRoot">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Updating" To="Determinate">
                    <Storyboard>
                      <RepositionThemeAnimation TargetName="DeterminateProgressBarIndicator" FromHorizontalOffset="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IndicatorLengthDelta}" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Paused" To="Determinate">
                    <Storyboard>
                      <DoubleAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.25" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Error" To="Determinate">
                    <Storyboard>
                      <ColorAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{TemplateBinding Foreground}" Duration="0:0:0.25" />
                      <ColorAnimation Storyboard.TargetName="ProgressBarRoot" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{TemplateBinding Background}" Duration="0:0:0.25" />
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Indeterminate" To="Determinate">
                    <Storyboard>
                      <Storyboard>
                        <FadeInThemeAnimation TargetName="IndeterminateProgressBarIndicator" />
                        <FadeInThemeAnimation TargetName="IndeterminateProgressBarIndicator2" />
                      </Storyboard>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Determinate" />
                <VisualState x:Name="Updating" />
                <VisualState x:Name="Indeterminate">
                  <Storyboard RepeatBehavior="Forever">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationStartPosition}" />
                      <SplineDoubleKeyFrame KeyTime="0:0:1.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:2" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:0.75" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" />
                      <SplineDoubleKeyFrame KeyTime="0:0:2" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <DoubleAnimation Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="Opacity" To="1" Duration="0" />
                    <FadeOutThemeAnimation TargetName="DeterminateProgressBarIndicator" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminateError">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateProgressBarIndicator">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:1" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:1.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:2.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationMidPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateProgressBarIndicator2">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:1" Value="0" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:1.51" Value="1" />
                    </DoubleAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                      <LinearColorKeyFrame Value="{ThemeResource SystemAccentColor}" KeyTime="0:0:2.75" />
                      <LinearColorKeyFrame Value="{ThemeResource SystemErrorTextColor}" KeyTime="0:0:3" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="ProgressBarRoot" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                      <LinearColorKeyFrame Value="{ThemeResource SystemBaseLowColor}" KeyTime="0:0:2.75" />
                      <LinearColorKeyFrame Value="{StaticResource SystemControlErrorBackgroundColor}" KeyTime="0:0:3" />
                    </ColorAnimationUsingKeyFrames>
                    <FadeOutThemeAnimation TargetName="DeterminateProgressBarIndicator" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Error">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" To="{ThemeResource SystemErrorTextColor}" Duration="0:0:0.25" />
                    <ColorAnimation Storyboard.TargetName="ProgressBarRoot" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)" To="{StaticResource SystemControlErrorBackgroundColor}" Duration="0:0:0.25" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="IndeterminatePaused">
                  <Storyboard>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateProgressBarIndicator">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:1" Value="0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.TranslateX)">
                      <SplineDoubleKeyFrame KeyTime="0:0:1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationEndPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:1.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Container2AnimationStartPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                      <SplineDoubleKeyFrame KeyTime="0:0:2.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ContainerAnimationMidPosition}" KeySpline="0.4, 0.0, 0.6, 1.0" />
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="IndeterminateProgressBarIndicator2">
                      <DiscreteDoubleKeyFrame KeyTime="0" Value="1" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:1" Value="0" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:1.51" Value="1" />
                      <DiscreteDoubleKeyFrame KeyTime="0:0:2.51" Value="{ThemeResource ProgressBarIndicatorPauseOpacity}" />
                    </DoubleAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="IndeterminateProgressBarIndicator2" Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)">
                      <LinearColorKeyFrame Value="{ThemeResource SystemAccentColor}" KeyTime="0:0:2.5" />
                      <LinearColorKeyFrame Value="{ThemeResource SystemBaseMediumLowColor}" KeyTime="0:0:2.75" />
                    </ColorAnimationUsingKeyFrames>
                    <FadeOutThemeAnimation TargetName="DeterminateProgressBarIndicator" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Paused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="Fill">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource SystemBaseMediumLowColor}" />
                    </ObjectAnimationUsingKeyFrames>
                    <DoubleAnimation Storyboard.TargetName="DeterminateProgressBarIndicator" Storyboard.TargetProperty="Opacity" To="{ThemeResource ProgressBarIndicatorPauseOpacity}" Duration="0:0:0.25" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="ProgressBarRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}">
              <Border Clip="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.ClipRect}">
                <Grid>
                  <Rectangle x:Name="DeterminateProgressBarIndicator" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}" />
                  <Rectangle x:Name="IndeterminateProgressBarIndicator" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" Opacity="0" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.RenderTransform>
                      <CompositeTransform />
                    </Rectangle.RenderTransform>
                  </Rectangle>
                  <Rectangle x:Name="IndeterminateProgressBarIndicator2" Margin="{TemplateBinding Padding}" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" Opacity="0" RadiusX="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource TopLeftCornerRadiusDoubleValueConverter}}" RadiusY="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource BottomRightCornerRadiusDoubleValueConverter}}">
                    <Rectangle.RenderTransform>
                      <CompositeTransform />
                    </Rectangle.RenderTransform>
                  </Rectangle>
                </Grid>
              </Border>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:ProgressRing">
    <Setter Property="Foreground" Value="{ThemeResource ProgressRingForegroundThemeBrush}" />
    <Setter Property="Background" Value="{ThemeResource ProgressRingBackgroundThemeBrush}" />
    <Setter Property="IsHitTestVisible" Value="False" />
    <Setter Property="HorizontalAlignment" Value="Center" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <Setter Property="MinHeight" Value="16" />
    <Setter Property="MinWidth" Value="16" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Width" Value="32" />
    <Setter Property="Maximum" Value="100" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:ProgressRing">
          <Grid x:Name="LayoutRoot" Background="Transparent">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Inactive">
                  <VisualState.Setters>
                    <Setter Target="LayoutRoot.Opacity" Value="0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="DeterminateActive" />
                <VisualState x:Name="Active" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- AnimatedVisualPlayer for Lottie -->
            <controls:AnimatedVisualPlayer x:Name="LottiePlayer" AutoPlay="false" Stretch="fill" Opacity="1" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:NumberBox">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="SelectionHighlightColor" Value="{ThemeResource TextControlSelectionHighlightColor}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:NumberBox">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="HeaderContentPresenter.Foreground" Value="{ThemeResource TextControlHeaderForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="SpinButtonStates">
                <VisualState x:Name="SpinButtonsCollapsed" />
                <VisualState x:Name="SpinButtonsVisible">
                  <VisualState.Setters>
                    <Setter Target="DownSpinButton.Visibility" Value="Visible" />
                    <Setter Target="UpSpinButton.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SpinButtonsPopup">
                  <VisualState.Setters>
                    <Setter Target="InputBox.Style" Value="{StaticResource NumberBoxTextBoxStyle}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="UpSpinButtonEnabledStates">
                <VisualState x:Name="UpSpinButtonEnabled" />
                <VisualState x:Name="UpSpinButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="UpSpinButton.IsEnabled" Value="False" />
                    <Setter Target="PopupUpSpinButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DownSpinButtonEnabledStates">
                <VisualState x:Name="DownSpinButtonEnabled" />
                <VisualState x:Name="DownSpinButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="DownSpinButton.IsEnabled" Value="False" />
                    <Setter Target="PopupDownSpinButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.Resources>
              <ResourceDictionary>
                <ResourceDictionary.ThemeDictionaries>
                  <ResourceDictionary x:Key="Light">
                    <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlBorderBrush" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlBorderBrush" />
                  </ResourceDictionary>
                  <ResourceDictionary x:Key="Dark">
                    <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="TextControlBorderBrush" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="TextControlBorderBrush" />
                  </ResourceDictionary>
                  <ResourceDictionary x:Key="HighContrast">
                    <StaticResource x:Key="RepeatButtonBorderBrushPointerOver" ResourceKey="SystemControlHighlightBaseMediumLowBrush" />
                    <StaticResource x:Key="RepeatButtonBorderBrushPressed" ResourceKey="SystemControlHighlightTransparentBrush" />
                  </ResourceDictionary>
                </ResourceDictionary.ThemeDictionaries>
              </ResourceDictionary>
            </Grid.Resources>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="HeaderContentPresenter" Grid.ColumnSpan="3" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontWeight="Normal" Foreground="{ThemeResource TextControlHeaderForeground}" Margin="{ThemeResource TextBoxTopHeaderMargin}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" TextWrapping="Wrap" VerticalAlignment="Top" Visibility="Collapsed" x:DeferLoadStrategy="Lazy" />
            <TextBox x:Name="InputBox" Grid.Row="1" InputScope="{TemplateBinding InputScope}" PlaceholderText="{TemplateBinding PlaceholderText}" SelectionHighlightColor="{TemplateBinding SelectionHighlightColor}" TextReadingOrder="{TemplateBinding TextReadingOrder}" PreventKeyboardDisplayOnProgrammaticFocus="{TemplateBinding PreventKeyboardDisplayOnProgrammaticFocus}" FontSize="{TemplateBinding FontSize}" FontWeight="{TemplateBinding FontWeight}" FontFamily="{TemplateBinding FontFamily}" TextAlignment="{TemplateBinding TextAlignment}" />
            <Popup x:Name="UpDownPopup" Grid.Row="1" Grid.Column="1" VerticalOffset="{ThemeResource NumberBoxPopupVerticalOffset}" HorizontalOffset="{ThemeResource NumberBoxPopupHorizonalOffset}" HorizontalAlignment="Left">
              <Grid x:Name="PopupContentRoot" Background="{ThemeResource NumberBoxPopupBackground}" BorderBrush="{ThemeResource NumberBoxPopupBorderBrush}" BorderThickness="{ThemeResource NumberBoxPopupBorderThickness}" CornerRadius="{ThemeResource OverlayCornerRadius}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*" />
                  <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <RepeatButton x:Name="PopupUpSpinButton" Style="{StaticResource NumberBoxPopupSpinButtonStyle}" Content="&#xE70E;" />
                <RepeatButton x:Name="PopupDownSpinButton" Style="{StaticResource NumberBoxPopupSpinButtonStyle}" Grid.Row="1" Content="&#xE70D;" />
              </Grid>
            </Popup>
            <RepeatButton x:Name="UpSpinButton" Grid.Row="1" Grid.Column="1" Visibility="Collapsed" FontSize="{TemplateBinding FontSize}" Content="&#xE70E;" Style="{StaticResource NumberBoxSpinButtonStyle}" />
            <RepeatButton x:Name="DownSpinButton" Grid.Row="1" Grid.Column="2" Visibility="Collapsed" FontSize="{TemplateBinding FontSize}" Content="&#xE70D;" Style="{StaticResource NumberBoxSpinButtonStyle}" />
            <ContentPresenter x:Name="DescriptionPresenter" Grid.Row="2" Grid.ColumnSpan="3" Content="{TemplateBinding Description}" Foreground="{ThemeResource SystemControlDescriptionTextForegroundBrush}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Name="NumberBoxSpinButtonStyle" TargetType="RepeatButton" BasedOn="{StaticResource DefaultRepeatButtonStyle}">
    <Style.Setters>
      <Setter Property="IsTabStop" Value="False" />
      <Setter Property="MinWidth" Value="34" />
      <Setter Property="VerticalAlignment" Value="Stretch" />
      <Setter Property="Background" Value="{ThemeResource TextControlBackground}" />
      <Setter Property="BorderBrush" Value="{ThemeResource TextControlBorderBrush}" />
      <Setter Property="BorderThickness" Value="{ThemeResource NumberBoxSpinButtonBorderThickness}" />
      <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    </Style.Setters>
  </Style>
  <Style x:Name="NumberBoxPopupSpinButtonStyle" TargetType="RepeatButton">
    <Style.Setters>
      <Setter Property="AutomationProperties.AccessibilityView" Value="Raw" />
      <Setter Property="IsTabStop" Value="False" />
      <Setter Property="Width" Value="40" />
      <Setter Property="Height" Value="32" />
      <Setter Property="Background" Value="{ThemeResource NumberBoxPopupSpinButtonBackground}" />
      <Setter Property="BorderThickness" Value="{ThemeResource NumberBoxPopupSpinButtonBorderThickness}" />
      <Setter Property="FontFamily" Value="{ThemeResource SymbolThemeFontFamily}" />
    </Style.Setters>
  </Style>
  <Style x:Key="NumberBoxTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource DefaultTextBoxStyle}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="TextBox">
          <Grid>
            <Grid.Resources>
              <Style x:Name="DeleteButtonStyle" TargetType="Button">
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate TargetType="Button">
                      <Grid x:Name="ButtonLayoutGrid" BorderBrush="{ThemeResource TextControlButtonBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{ThemeResource TextControlButtonBackground}" CornerRadius="{Binding Source={ThemeResource ControlCornerRadius}, Converter={StaticResource RightCornerRadiusFilterConverter}}">
                        <VisualStateManager.VisualStateGroups>
                          <VisualStateGroup x:Name="CommonStates">
                            <VisualState x:Name="Normal" />
                            <VisualState x:Name="PointerOver">
                              <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Background">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBackgroundPointerOver}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="BorderBrush">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBorderBrushPointerOver}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphElement" Storyboard.TargetProperty="Foreground">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonForegroundPointerOver}" />
                                </ObjectAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Pressed">
                              <Storyboard>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Background">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBackgroundPressed}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="BorderBrush">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonBorderBrushPressed}" />
                                </ObjectAnimationUsingKeyFrames>
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="GlyphElement" Storyboard.TargetProperty="Foreground">
                                  <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlButtonForegroundPressed}" />
                                </ObjectAnimationUsingKeyFrames>
                              </Storyboard>
                            </VisualState>
                            <VisualState x:Name="Disabled">
                              <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ButtonLayoutGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0" />
                              </Storyboard>
                            </VisualState>
                          </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <TextBlock x:Name="GlyphElement" Foreground="{ThemeResource TextControlButtonForeground}" VerticalAlignment="Center" HorizontalAlignment="Center" FontStyle="Normal" FontSize="12" Text="&#xE10A;" FontFamily="{ThemeResource SymbolThemeFontFamily}" AutomationProperties.AccessibilityView="Raw" />
                      </Grid>
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="HeaderContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlHeaderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBackgroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderBrushDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlPlaceholderForegroundDisabled}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="PointerOver">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderBrushPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBackgroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlPlaceholderForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlForegroundPointerOver}" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PlaceholderTextContentPresenter" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlPlaceholderForegroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="Background">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBackgroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderBrush">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderBrushFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="BorderElement" Storyboard.TargetProperty="BorderThickness">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlBorderThemeThicknessFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="Foreground">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="{ThemeResource TextControlForegroundFocused}" />
                    </ObjectAnimationUsingKeyFrames>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentElement" Storyboard.TargetProperty="RequestedTheme">
                      <DiscreteObjectKeyFrame KeyTime="0" Value="Light" />
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ButtonStates">
                <VisualState x:Name="ButtonVisible">
                  <Storyboard>
                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="DeleteButton" Storyboard.TargetProperty="Visibility">
                      <DiscreteObjectKeyFrame KeyTime="0">
                        <DiscreteObjectKeyFrame.Value>
                          <Visibility>Visible</Visibility>
                        </DiscreteObjectKeyFrame.Value>
                      </DiscreteObjectKeyFrame>
                    </ObjectAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ButtonCollapsed" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="HeaderContentPresenter" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" FontWeight="Normal" Foreground="{ThemeResource TextControlHeaderForeground}" Margin="{ThemeResource TextBoxTopHeaderMargin}" TextWrapping="Wrap" VerticalAlignment="Top" Visibility="Collapsed" x:DeferLoadStrategy="Lazy" />
            <Border x:Name="BorderElement" Grid.Row="1" Grid.Column="0" Grid.RowSpan="1" Grid.ColumnSpan="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource ControlCornerRadius}" Control.IsTemplateFocusTarget="True" MinWidth="{TemplateBinding MinWidth}" MinHeight="{TemplateBinding MinHeight}" />
            <ScrollViewer x:Name="ContentElement" Grid.Row="1" Grid.Column="0" HorizontalScrollMode="{TemplateBinding ScrollViewer.HorizontalScrollMode}" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollMode="{TemplateBinding ScrollViewer.VerticalScrollMode}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" IsHorizontalRailEnabled="{TemplateBinding ScrollViewer.IsHorizontalRailEnabled}" IsVerticalRailEnabled="{TemplateBinding ScrollViewer.IsVerticalRailEnabled}" IsDeferredScrollingEnabled="{TemplateBinding ScrollViewer.IsDeferredScrollingEnabled}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" ZoomMode="Disabled" />
            <TextBlock x:Name="PlaceholderTextContentPresenter" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Foreground="{ThemeResource TextControlPlaceholderForeground}" Margin="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" Text="{TemplateBinding PlaceholderText}" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="{TemplateBinding TextWrapping}" IsHitTestVisible="False" />
            <Button x:Name="DeleteButton" Grid.Row="1" Grid.Column="1" Style="{StaticResource DeleteButtonStyle}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{ThemeResource HelperButtonThemePadding}" IsTabStop="False" Visibility="Collapsed" AutomationProperties.AccessibilityView="Raw" FontSize="{TemplateBinding FontSize}" MinWidth="34" VerticalAlignment="Stretch" />
            <TextBlock Grid.Row="1" Grid.Column="2" Margin="{StaticResource NumberBoxPopupIndicatorMargin}" Foreground="{ThemeResource NumberBoxPopupIndicatorForeground}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="12" Text="&#xEC8F;" FontFamily="{ThemeResource SymbolThemeFontFamily}" AutomationProperties.AccessibilityView="Raw" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:Expander" BasedOn="{StaticResource DefaultExpanderStyle}" />
  <Style x:Key="DefaultExpanderStyle" TargetType="controls:Expander">
    <!-- We won't make this control tab stoppable, since the tab focus should go
            to the toggle button. For this logic, several things were made:
            1. Expander::OnApplyTemplate - We set the toggle button's events source to the expander's. This will announce expander properties
               (expand/collapse) changes to narrator. Without this, narrator would announce the toggle button's "on/off" logic
               instead of the "expand/collapse" logic.
            2. ExpanderAutomationPeer::GetChildrenCore - Because of 1., we need to override GetChildrenCore to NOT include the toggle button.
               If we don't do this, we create a weird dependency cycle between the toggle button and the expander.
            3. ExpanderAutomationPeer::GetPeerFromPointCore Finally, when using narrator with a touch screen, this was overriden as well, to
               focus the toggle button programmatically to sync the narrator focus with the keyboard focus.
               Without this override, the narrator user that focuses the expander on a touch screen will see that pressing "Tab"
               doesn't work how they would expect.-->
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:Expander">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="ExpandStates">
                <VisualState x:Name="Expanded">
                  <VisualState.Storyboard>
                    <Storyboard>
                      <PopInThemeAnimation x:Name="PopIn" TargetName="ExpanderContent" FromVerticalOffset="-50" FromHorizontalOffset="0" />
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="Visibility">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="Visible" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualState.Storyboard>
                </VisualState>
                <VisualState x:Name="Collapsed">
                  <VisualState.Storyboard>
                    <Storyboard>
                      <PopOutThemeAnimation TargetName="ExpanderContent" />
                    </Storyboard>
                  </VisualState.Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="ExpandDirectionStates">
                <VisualState x:Name="Down" />
                <VisualState x:Name="Up">
                  <VisualState.Setters>
                    <Setter Target="ExpanderHeader.Style" Value="{StaticResource ExpanderHeaderUpStyle}" />
                    <Setter Target="ExpanderHeader.(Grid.Row)" Value="1" />
                    <Setter Target="ExpanderContent.(Grid.Row)" Value="0" />
                    <Setter Target="Row0.Height" Value="*" />
                    <Setter Target="Row1.Height" Value="Auto" />
                    <Setter Target="PopIn.FromVerticalOffset" Value="{ThemeResource ExpanderPopinVerticalOffset}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid.RowDefinitions>
              <RowDefinition x:Name="Row0" Height="Auto" />
              <RowDefinition x:Name="Row1" Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition x:Name="Column0" Width="*" />
              <ColumnDefinition x:Name="Column1" Width="Auto" />
            </Grid.ColumnDefinitions>
            <ToggleButton x:Name="ExpanderHeader" AutomationProperties.AutomationId="ExpanderToggleButton" MinWidth="0" MinHeight="0" IsEnabled="{TemplateBinding IsEnabled}" Style="{StaticResource ExpanderHeaderDownStyle}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" />
            <ContentPresenter x:Name="ExpanderContent" Grid.Row="1" Visibility="Collapsed" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderHeaderDownStyle" TargetType="ToggleButton">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{ThemeResource ExpanderHeaderBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="180.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
                <VisualState x:Name="IndeterminatePointerOver" />
                <VisualState x:Name="IndeterminatePressed" />
                <VisualState x:Name="IndeterminateDisabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <Grid x:Name="ExpandCollapseChevron" Grid.Column="1" Width="{ThemeResource ExpanderChevronWidth}" Margin="{ThemeResource ExpanderChevronMargin}" Background="{ThemeResource ExpanderChevronBackground}">
              <TextBlock RenderTransformOrigin="0.5, 0.5" Foreground="{ThemeResource ExpanderChevronForeground}" Text="{StaticResource ExpanderChevronGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                <TextBlock.RenderTransform>
                  <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="0" />
                </TextBlock.RenderTransform>
              </TextBlock>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderHeaderUpStyle" TargetType="ToggleButton">
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Background" Value="{ThemeResource ExpanderHeaderBackground}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver" />
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
                <VisualState x:Name="Checked">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedPointerOver">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedPressed">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="CheckedDisabled">
                  <Storyboard>
                    <DoubleAnimation Storyboard.TargetName="ExpandCollapseChevronRotateTransform" Storyboard.TargetProperty="Angle" To="0.0" Duration="0:0:0.1" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Indeterminate" />
                <VisualState x:Name="IndeterminatePointerOver" />
                <VisualState x:Name="IndeterminatePressed" />
                <VisualState x:Name="IndeterminateDisabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <ContentPresenter x:Name="ContentPresenter" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTransitions="{TemplateBinding ContentTransitions}" CornerRadius="{TemplateBinding CornerRadius}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" AutomationProperties.AccessibilityView="Raw" />
            <Grid x:Name="ExpandCollapseChevron" Grid.Column="1" Width="{ThemeResource ExpanderChevronWidth}" Margin="{ThemeResource ExpanderChevronMargin}" Background="{ThemeResource ExpanderChevronBackground}">
              <TextBlock RenderTransformOrigin="0.5, 0.5" Foreground="{ThemeResource ExpanderChevronForeground}" Text="{StaticResource ExpanderChevronGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" HorizontalAlignment="Center" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False">
                <TextBlock.RenderTransform>
                  <RotateTransform x:Name="ExpandCollapseChevronRotateTransform" Angle="180" />
                </TextBlock.RenderTransform>
              </TextBlock>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:PagerControl">
    <Setter Property="AutomationProperties.LandmarkType" Value="Navigation" />
    <Setter Property="FirstButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="PreviousButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="NextButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="LastButtonStyle" Value="{StaticResource PagerControlPageNavigationButtonStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:PagerControl">
          <Grid x:Name="RootGrid" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="FirstPageButtonVisibilityStates">
                <VisualState x:Name="FirstPageButtonVisible" />
                <VisualState x:Name="FirstPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="FirstPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="FirstPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="FirstPageButton.Opacity" Value="0" />
                    <Setter Target="FirstPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FirstPageButtonIsEnabledStates">
                <VisualState x:Name="FirstPageButtonEnabled" />
                <VisualState x:Name="FirstPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="FirstPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousPageButtonVisibilityStates">
                <VisualState x:Name="PreviousPageButtonVisible" />
                <VisualState x:Name="PreviousPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PreviousPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.Opacity" Value="0" />
                    <Setter Target="PreviousPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PreviousPageButtonIsEnabledStates">
                <VisualState x:Name="PreviousPageButtonEnabled" />
                <VisualState x:Name="PreviousPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="PreviousPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NextPageButtonVisibilityStates">
                <VisualState x:Name="NextPageButtonVisible" />
                <VisualState x:Name="NextPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="NextPageButtonIsEnabledStates">
                <VisualState x:Name="NextPageButtonEnabled" />
                <VisualState x:Name="NextPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NextPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="NextPageButton.Opacity" Value="0" />
                    <Setter Target="NextPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="LastPageButtonStates">
                <VisualState x:Name="LastPageButtonVisible" />
                <VisualState x:Name="LastPageButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="LastPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="LastPageButtonEnabled" />
                <VisualState x:Name="LastPageButtonDisabled">
                  <VisualState.Setters>
                    <Setter Target="LastPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="LastPageButtonHidden">
                  <VisualState.Setters>
                    <Setter Target="LastPageButton.Opacity" Value="0" />
                    <Setter Target="LastPageButton.IsEnabled" Value="False" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="PagerDisplayModeStates">
                <VisualState x:Name="NumberBoxVisible">
                  <VisualState.Setters>
                    <Setter Target="BoxPanels.Visibility" Value="Visible" />
                    <Setter Target="NumberBoxDisplay.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ComboBoxVisible">
                  <VisualState.Setters>
                    <Setter Target="ComboBoxDisplay.IsEnabled" Value="True" />
                    <Setter Target="BoxPanels.Visibility" Value="Visible" />
                    <Setter Target="ComboBoxDisplay.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NumberPanelVisible">
                  <VisualState.Setters>
                    <Setter Target="BoxPanels.Visibility" Value="Collapsed" />
                    <Setter Target="NumberBoxDisplay.Visibility" Value="Collapsed" />
                    <Setter Target="ComboBoxDisplay.Visibility" Value="Collapsed" />
                    <Setter Target="NumberPanelItemsRepeater.Visibility" Value="Visible" />
                    <Setter Target="NumberPanelCurrentPageIndicator.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="InfiniteItemsDisplayMode">
                <VisualState x:Name="FiniteItems" />
                <VisualState x:Name="InfiniteItems">
                  <VisualState.Setters>
                    <Setter Target="SuffixTextLabel.Visibility" Value="Collapsed" />
                    <Setter Target="TotalNumberOfPagesLabel.Visibility" Value="Collapsed" />
                    <Setter Target="LastPageButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
              <Button x:Name="FirstPageButton" ToolTipService.ToolTip="{Binding ElementName=FirstPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding FirstButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE892;" />
              <Button x:Name="PreviousPageButton" ToolTipService.ToolTip="{Binding ElementName=PreviousPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding PreviousButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE76B;" />
            </StackPanel>
            <StackPanel x:Name="BoxPanels" Visibility="Collapsed" Orientation="Horizontal" Grid.Column="1">
              <TextBlock Text="{TemplateBinding PrefixText}" VerticalAlignment="Center" Margin="5,0,5,0" />
              <!--NumberBox Display-->
              <controls:NumberBox x:Name="NumberBoxDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" Maximum="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberOfPages, Mode=OneWay}" Minimum="1" SmallChange="1" LargeChange="5" Visibility="Collapsed" />
              <!--ComboBox Display-->
              <ComboBox x:Name="ComboBoxDisplay" HorizontalAlignment="Center" VerticalAlignment="Center" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.Pages}" Visibility="Collapsed" />
              <TextBlock x:Name="SuffixTextLabel" Text="{TemplateBinding SuffixText}" VerticalAlignment="Center" Margin="5,0,0,0" />
              <TextBlock x:Name="TotalNumberOfPagesLabel" VerticalAlignment="Center" Margin="5,0,5,0" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NumberOfPages, Mode=OneWay}" />
            </StackPanel>
            <controls:ItemsRepeater x:Name="NumberPanelItemsRepeater" ItemsSource="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.NumberPanelItems}" Grid.Column="1" Visibility="Collapsed">
              <controls:ItemsRepeater.Layout>
                <controls:StackLayout Orientation="Horizontal" Spacing="5" />
              </controls:ItemsRepeater.Layout>
            </controls:ItemsRepeater>
            <Rectangle x:Name="NumberPanelCurrentPageIndicator" HorizontalAlignment="Left" VerticalAlignment="Bottom" Grid.Column="1" Visibility="Collapsed" Fill="{ThemeResource PagerControlSelectionIndicatorForeground}" RadiusX="1" RadiusY="1" Height="2">
              <Rectangle.Transitions>
                <TransitionCollection>
                  <RepositionThemeTransition />
                </TransitionCollection>
              </Rectangle.Transitions>
            </Rectangle>
            <StackPanel Orientation="Horizontal" Grid.Column="2" HorizontalAlignment="Left">
              <Button x:Name="NextPageButton" ToolTipService.ToolTip="{Binding ElementName=NextPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding NextButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE76C;" />
              <Button x:Name="LastPageButton" ToolTipService.ToolTip="{Binding ElementName=LastPageButton, Path=(AutomationProperties.Name)}" Style="{TemplateBinding LastButtonStyle}" FontFamily="{StaticResource SymbolThemeFontFamily}" Content="&#xE893;" />
            </StackPanel>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="controls:InfoBar">
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="CloseButtonStyle" Value="{StaticResource InfoBarCloseButtonStyle}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:InfoBar">
          <Border x:Name="ContentRoot" VerticalAlignment="Top" Background="{ThemeResource InfoBarInformationalSeverityBackgroundBrush}" BorderBrush="{ThemeResource InfoBarBorderBrush}" BorderThickness="{ThemeResource InfoBarBorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="SeverityLevels">
                <VisualState x:Name="Informational" />
                <VisualState x:Name="Error">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Background" Value="{ThemeResource InfoBarErrorSeverityBackgroundBrush}" />
                    <Setter Target="StandardIcon.Glyph" Value="{StaticResource InfoBarErrorIconGlyph}" />
                    <Setter Target="StandardIcon.Foreground" Value="{ThemeResource InfoBarErrorSeverityIconForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Warning">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Background" Value="{ThemeResource InfoBarWarningSeverityBackgroundBrush}" />
                    <Setter Target="StandardIcon.Glyph" Value="{StaticResource InfoBarWarningIconGlyph}" />
                    <Setter Target="StandardIcon.Foreground" Value="{ThemeResource InfoBarWarningSeverityIconForeground}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Success">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Background" Value="{ThemeResource InfoBarSuccessSeverityBackgroundBrush}" />
                    <Setter Target="StandardIcon.Glyph" Value="{StaticResource InfoBarSuccessIconGlyph}" />
                    <Setter Target="StandardIcon.Foreground" Value="{ThemeResource InfoBarSuccessSeverityIconForeground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="IconStates">
                <VisualState x:Name="StandardIconVisible">
                  <VisualState.Setters>
                    <Setter Target="StandardIcon.Visibility" Value="Visible" />
                    <Setter Target="UserIconBorder.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="UserIconVisible">
                  <VisualState.Setters>
                    <Setter Target="UserIconBorder.Visibility" Value="Visible" />
                    <Setter Target="StandardIcon.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="NoIconVisible" />
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="CloseButtonVisible" />
                <VisualState x:Name="CloseButtonCollapsed">
                  <VisualState.Setters>
                    <Setter Target="CloseButton.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="InfoBarVisibility">
                <VisualState x:Name="InfoBarVisible" />
                <VisualState x:Name="InfoBarCollapsed">
                  <VisualState.Setters>
                    <Setter Target="ContentRoot.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="ForegroundNotSet" />
                <VisualState x:Name="ForegroundSet">
                  <VisualState.Setters>
                    <Setter Target="Title.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                    <Setter Target="Message.Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <!-- Background is used here so that it overrides the severity status color if set. -->
            <Grid HorizontalAlignment="Stretch" MinHeight="{ThemeResource InfoBarMinHeight}" Background="{TemplateBinding Background}" Padding="{StaticResource InfoBarContentRootPadding}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <!-- Icon -->
                <ColumnDefinition Width="*" />
                <!-- Title, message, and action -->
                <ColumnDefinition Width="Auto" />
                <!-- Close button -->
              </Grid.ColumnDefinitions>
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
              </Grid.RowDefinitions>
              <FontIcon x:Name="StandardIcon" Grid.Column="0" Visibility="Collapsed" VerticalAlignment="Top" Margin="{StaticResource InfoBarIconMargin}" FontSize="{StaticResource InfoBarIconFontSize}" Glyph="{StaticResource InfoBarInformationalIconGlyph}" Foreground="{ThemeResource InfoBarInformationalSeverityIconForeground}" FontFamily="{ThemeResource SymbolThemeFontFamily}" AutomationProperties.AccessibilityView="Raw" />
              <Border x:Name="UserIconBorder" Grid.Column="0" Visibility="Collapsed" VerticalAlignment="Top" Margin="{StaticResource InfoBarIconMargin}" Child="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TemplateSettings.IconElement}" />
              <primitives:InfoBarPanel Grid.Column="1" Margin="{StaticResource InfoBarPanelMargin}" HorizontalOrientationPadding="{StaticResource InfoBarPanelHorizontalOrientationPadding}" VerticalOrientationPadding="{StaticResource InfoBarPanelVerticalOrientationPadding}">
                <TextBlock x:Name="Title" Text="{TemplateBinding Title}" Foreground="{ThemeResource InfoBarTitleForeground}" primitives:InfoBarPanel.HorizontalOrientationMargin="{StaticResource InfoBarTitleHorizontalOrientationMargin}" primitives:InfoBarPanel.VerticalOrientationMargin="{StaticResource InfoBarTitleVerticalOrientationMargin}" TextWrapping="WrapWholeWords" AutomationProperties.LandmarkType="Navigation" FontWeight="{StaticResource InfoBarTitleFontWeight}" FontSize="{StaticResource InfoBarTitleFontSize}" />
                <TextBlock x:Name="Message" Text="{TemplateBinding Message}" Foreground="{ThemeResource InfoBarMessageForeground}" primitives:InfoBarPanel.HorizontalOrientationMargin="{StaticResource InfoBarMessageHorizontalOrientationMargin}" primitives:InfoBarPanel.VerticalOrientationMargin="{StaticResource InfoBarMessageVerticalOrientationMargin}" TextWrapping="WrapWholeWords" FontWeight="{StaticResource InfoBarMessageFontWeight}" FontSize="{StaticResource InfoBarMessageFontSize}" />
                <ContentPresenter primitives:InfoBarPanel.HorizontalOrientationMargin="{StaticResource InfoBarActionHorizontalOrientationMargin}" primitives:InfoBarPanel.VerticalOrientationMargin="{StaticResource InfoBarActionVerticalOrientationMargin}" VerticalAlignment="Top" Content="{TemplateBinding ActionButton}">
                  <ContentPresenter.Resources>
                    <Style TargetType="Button">
                      <Style.Setters>
                        <Setter Property="MinWidth" Value="{StaticResource InfoBarActionButtonMinWidth}" />
                        <Setter Property="Padding" Value="{StaticResource InfoBarActionButtonPadding}" />
                        <Setter Property="MinHeight" Value="{StaticResource InfoBarActionButtonMinHeight}" />
                      </Style.Setters>
                    </Style>
                    <Style TargetType="HyperlinkButton">
                      <Style.Setters>
                        <Setter Property="FontSize" Value="{ThemeResource InfoBarHyperlinkButtonFontSize}" />
                        <Setter Property="Foreground" Value="{ThemeResource InfoBarHyperlinkButtonForeground}" />
                        <Setter Property="Padding" Value="{StaticResource InfoBarHyperlinkButtonPadding}" />
                        <Setter Property="MinHeight" Value="{ThemeResource InfoBarHyperlinkButtonMinHeight}" />
                      </Style.Setters>
                    </Style>
                  </ContentPresenter.Resources>
                </ContentPresenter>
              </primitives:InfoBarPanel>
              <ContentPresenter Grid.Column="1" Grid.Row="1" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
              <Button Name="CloseButton" Grid.Column="2" Command="{TemplateBinding CloseButtonCommand}" CommandParameter="{TemplateBinding CloseButtonCommandParameter}" Style="{TemplateBinding CloseButtonStyle}">
                <Viewbox Width="{StaticResource InfoBarCloseButtonGlyphSize}" Height="{StaticResource InfoBarCloseButtonGlyphSize}" HorizontalAlignment="Center" VerticalAlignment="Center">
                  <SymbolIcon Symbol="{StaticResource InfoBarCloseButtonSymbol}" />
                </Viewbox>
              </Button>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DefaultCommandBarFlyoutCommandBarStyle" TargetType="primitives:CommandBarFlyoutCommandBar">
    <Setter Property="Background" Value="{ThemeResource SystemControlAcrylicElementBrush}" />
    <Setter Property="Foreground" Value="{ThemeResource SystemControlForegroundBaseHighBrush}" />
    <Setter Property="BorderBrush" Value="{ThemeResource SystemControlTransientBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderThemeThickness}" />
    <Setter Property="IsTabStop" Value="False" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Top" />
    <Setter Property="ClosedDisplayMode" Value="Compact" />
    <Setter Property="ExitDisplayModeOnAccessKeyInvoked" Value="False" />
    <Setter Property="DefaultLabelPosition" Value="Collapsed" />
    <Setter Property="MaxWidth" Value="440" />
    <Setter Property="Height" Value="40" />
    <Setter Property="IsDynamicOverflowEnabled" Value="True" />
    <Setter Property="CommandBarOverflowPresenterStyle" Value="{StaticResource CommandBarFlyoutCommandBarOverflowPresenterStyle}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="primitives:CommandBarFlyoutCommandBar">
          <Grid x:Name="LayoutRoot" CornerRadius="{ThemeResource OverlayCornerRadius}">
            <Grid.Resources>
              <Style TargetType="AppBarButton" BasedOn="{StaticResource CommandBarFlyoutAppBarButtonStyle}" />
              <Style TargetType="AppBarToggleButton" BasedOn="{StaticResource CommandBarFlyoutAppBarToggleButtonStyle}" />
              <!-- We'll only provide opening and closing storyboards for RS5 and above,
                                 because we aren't able to suppress the default flyout open/close animations
                                 on earlier versions of the OS than that. -->
              <!-- The closing animation plays the opening animation in reverse and then snaps to a position where
                                 the clip will fully hide the flyout, in preparation for closing the flyout.
                                 As such, it's expected and normal that we use OpenAnimation* template settings properties
                                 in the closing animation. -->
            </Grid.Resources>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="EllipsisIcon.Foreground" Value="{ThemeResource CommandBarEllipsisIconForegroundDisabled}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <!-- We can't actually *use* the DisplayModeStates visual state group for our purposes,
                                 because CommandBar unconditionally defaults to opening up, whereas we want to default
                                 to opening down.  However, the visual state group needs to be *present* for the CommandBar
                                 to wait until the closing animation has completed before hiding the popup,
                                 so we'll include dummy empty storyboards to get CommandBar to do what we want. -->
              <VisualStateGroup x:Name="DisplayModeStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="CompactClosed" To="CompactOpenUp" GeneratedDuration="0:0:0.300">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition From="CompactOpenUp" To="CompactClosed" GeneratedDuration="0:0:0.150">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition From="CompactClosed" To="CompactOpenDown" GeneratedDuration="0:0:0.300">
                    <Storyboard />
                  </VisualTransition>
                  <VisualTransition From="CompactOpenDown" To="CompactClosed" GeneratedDuration="0:0:0.150">
                    <Storyboard />
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="CompactClosed" />
                <VisualState x:Name="CompactOpenUp" />
                <VisualState x:Name="CompactOpenDown" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="ExpansionStates">
                <VisualStateGroup.Transitions>
                  <VisualTransition From="Collapsed" To="ExpandedUp" GeneratedDuration="0:0:0.300">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandedWidth}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpOverflowVerticalPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MoreButtonTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionMoreButtonAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="CornerRadius">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PrimaryItemsRoot" Storyboard.TargetProperty="CornerRadius">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterOverflowContentRoot" Storyboard.TargetProperty="CornerRadius">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ExpandedUp" To="Collapsed" GeneratedDuration="0:0:0.150">
                    <Storyboard FillBehavior="Stop">
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandedWidth}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpOverflowVerticalPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MoreButtonTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionMoreButtonAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionMoreButtonAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationEndPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationHoldPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="Collapsed" To="ExpandedDown" GeneratedDuration="0:0:0.300">
                    <Storyboard>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandedWidth}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MoreButtonTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionMoreButtonAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationStartPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.300" KeySpline="0.1,0.9 0.2,1" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LayoutRoot" Storyboard.TargetProperty="CornerRadius">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PrimaryItemsRoot" Storyboard.TargetProperty="CornerRadius">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                      </ObjectAnimationUsingKeyFrames>
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="OuterOverflowContentRoot" Storyboard.TargetProperty="CornerRadius">
                        <DiscreteObjectKeyFrame KeyTime="0" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                      </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                  <VisualTransition From="ExpandedDown" To="Collapsed" GeneratedDuration="0:0:0.150">
                    <Storyboard FillBehavior="Stop">
                      <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ContentRoot" Storyboard.TargetProperty="Width">
                        <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandedWidth}" />
                      </ObjectAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MoreButtonTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionMoreButtonAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionMoreButtonAnimationEndPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="X">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="0" />
                      </DoubleAnimationUsingKeyFrames>
                      <DoubleAnimationUsingKeyFrames Storyboard.TargetName="OverflowContentRootClipTransform" Storyboard.TargetProperty="Y">
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationEndPosition}" />
                        <SplineDoubleKeyFrame KeyTime="0:0:0.150" KeySpline="0.7,0 1,0.5" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationStartPosition}" />
                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.151" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationHoldPosition}" />
                      </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                  </VisualTransition>
                </VisualStateGroup.Transitions>
                <VisualState x:Name="Collapsed" />
                <VisualState x:Name="ExpandedUp">
                  <VisualState.Setters>
                    <Setter Target="MoreButtonTransform.X" Value="0" />
                    <Setter Target="ContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                    <Setter Target="OverflowContentRootTransform.Y" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpOverflowVerticalPosition}" />
                    <Setter Target="OverflowContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                    <Setter Target="OverflowContentRootClipTransform.Y" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandUpAnimationEndPosition}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ExpandedDown">
                  <VisualState.Setters>
                    <Setter Target="MoreButtonTransform.X" Value="0" />
                    <Setter Target="ContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                    <Setter Target="OverflowContentRootClipTransform.X" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionAnimationEndPosition}" />
                    <Setter Target="OverflowContentRootClipTransform.Y" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownAnimationEndPosition}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="AvailableCommandsStates">
                <VisualState x:Name="BothCommands" />
                <VisualState x:Name="PrimaryCommandsOnly">
                  <VisualState.Setters>
                    <Setter Target="OverflowContentRoot.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SecondaryCommandsOnly">
                  <VisualState.Setters>
                    <Setter Target="PrimaryItemsRoot.Visibility" Value="Collapsed" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup>
                <VisualState x:Name="Default" />
                <VisualState x:Name="ExpandedUpWithPrimaryCommands">
                  <VisualState.Setters>
                    <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderUpThemeThickness}" />
                    <Setter Target="LayoutRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                    <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                    <Setter Target="OuterOverflowContentRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ExpandedDownWithPrimaryCommands">
                  <VisualState.Setters>
                    <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderDownThemeThickness}" />
                    <Setter Target="LayoutRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                    <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource TopCornerRadiusFilterConverter}}" />
                    <Setter Target="OuterOverflowContentRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}, Converter={StaticResource BottomCornerRadiusFilterConverter}}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ExpandedUpWithoutPrimaryCommands">
                  <VisualState.Setters>
                    <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderThemeThickness}" />
                    <Setter Target="LayoutRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}}" />
                    <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}}" />
                    <Setter Target="OuterOverflowContentRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ExpandedDownWithoutPrimaryCommands">
                  <VisualState.Setters>
                    <Setter Target="SecondaryItemsControl.BorderThickness" Value="{ThemeResource CommandBarFlyoutBorderThemeThickness}" />
                    <Setter Target="LayoutRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}}" />
                    <Setter Target="PrimaryItemsRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}}" />
                    <Setter Target="OuterOverflowContentRoot.CornerRadius" Value="{Binding Source={ThemeResource OverlayCornerRadius}}" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="OuterContentRoot" VerticalAlignment="Top" Margin="{TemplateBinding Padding}" MinWidth="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.CurrentWidth}" Height="{TemplateBinding Height}" XYFocusKeyboardNavigation="Enabled">
              <Grid.Clip>
                <RectangleGeometry x:Name="OuterContentRootClip" Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ContentClipRect}">
                  <RectangleGeometry.Transform>
                    <TranslateTransform x:Name="OuterContentRootClipTransform" />
                  </RectangleGeometry.Transform>
                </RectangleGeometry>
              </Grid.Clip>
              <Grid x:Name="ContentRoot" Background="{TemplateBinding Background}">
                <Grid.Clip>
                  <RectangleGeometry x:Name="ContentRootClip" Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ContentClipRect}">
                    <RectangleGeometry.Transform>
                      <!-- If you have a value set by a binding and then animate that value,
                                                 the animation will clear the binding.  Because of that, we need to have
                                                 two translate transforms - one that we bind to a property,
                                                 and another that we can animate. -->
                      <TransformGroup>
                        <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionDelta}" />
                        <TranslateTransform x:Name="ContentRootClipTransform" />
                      </TransformGroup>
                    </RectangleGeometry.Transform>
                  </RectangleGeometry>
                </Grid.Clip>
                <Grid x:Name="PrimaryItemsRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{ThemeResource OverlayCornerRadius}">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                  </Grid.ColumnDefinitions>
                  <ItemsControl x:Name="PrimaryItemsControl" Height="40" Grid.Column="0" IsTabStop="False" HorizontalAlignment="Left">
                    <ItemsControl.ItemsPanel>
                      <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" />
                      </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                  </ItemsControl>
                  <Button x:Name="MoreButton" Foreground="{TemplateBinding Foreground}" Style="{StaticResource CommandBarFlyoutEllipsisButtonStyle}" Grid.Column="1" Control.IsTemplateKeyTipTarget="True" IsAccessKeyScope="True" IsTabStop="False" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandBarTemplateSettings.EffectiveOverflowButtonVisibility}">
                    <Button.RenderTransform>
                      <TranslateTransform x:Name="MoreButtonTransform" />
                    </Button.RenderTransform>
                    <FontIcon x:Name="EllipsisIcon" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="{ThemeResource SymbolThemeFontFamily}" FontSize="16" Glyph="&#xE10C;" />
                  </Button>
                </Grid>
                <Popup x:Name="OverflowPopup">
                  <Grid x:Name="OuterOverflowContentRoot" Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandedWidth}">
                    <Grid.Clip>
                      <RectangleGeometry x:Name="OuterOverflowContentRootClip" Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.OverflowContentClipRect}">
                        <RectangleGeometry.Transform>
                          <TranslateTransform x:Name="OuterOverflowContentRootClipTransform" />
                        </RectangleGeometry.Transform>
                      </RectangleGeometry>
                    </Grid.Clip>
                    <Grid.RenderTransform>
                      <TranslateTransform x:Name="OverflowContentRootTransform" Y="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.ExpandDownOverflowVerticalPosition}" />
                    </Grid.RenderTransform>
                    <Grid x:Name="OverflowContentRoot" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}">
                      <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                        <RowDefinition Height="Auto" />
                      </Grid.RowDefinitions>
                      <Grid.Clip>
                        <RectangleGeometry x:Name="OverflowContentRootClip" Rect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.OverflowContentClipRect}">
                          <RectangleGeometry.Transform>
                            <!-- If you have a value set by a binding and then animate that value,
                                                             the animation will clear the binding.  Because of that, we need to have
                                                             two translate transforms - one that we bind to a property,
                                                             and another that we can animate. -->
                            <TransformGroup>
                              <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FlyoutTemplateSettings.WidthExpansionDelta}" />
                              <TranslateTransform x:Name="OverflowContentRootClipTransform" />
                            </TransformGroup>
                          </RectangleGeometry.Transform>
                        </RectangleGeometry>
                      </Grid.Clip>
                      <CommandBarOverflowPresenter Grid.Row="1" x:Name="SecondaryItemsControl" Style="{TemplateBinding CommandBarOverflowPresenterStyle}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{ThemeResource CommandBarFlyoutBorderThemeThickness}" IsTabStop="False">
                        <CommandBarOverflowPresenter.ItemContainerStyle>
                          <Style TargetType="FrameworkElement">
                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                            <Setter Property="Width" Value="NaN" />
                          </Style>
                        </CommandBarOverflowPresenter.ItemContainerStyle>
                      </CommandBarOverflowPresenter>
                    </Grid>
                  </Grid>
                </Popup>
              </Grid>
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="primitives:CommandBarFlyoutCommandBar" BasedOn="{StaticResource DefaultCommandBarFlyoutCommandBarStyle}" />
  <Style TargetType="controls:TreeViewItem" BasedOn="{StaticResource ListViewItemRevealStyle}" x:Key="MUX_TreeViewItemStyle">
    <Setter Property="Padding" Value="0" />
    <Setter Property="Background" Value="{ThemeResource TreeViewItemBackground}" />
    <Setter Property="BorderBrush" Value="{ThemeResource TreeViewItemBorderBrush}" />
    <Setter Property="BorderThickness" Value="{ThemeResource TreeViewItemBorderThemeThickness}" />
    <Setter Property="GlyphBrush" Value="{ThemeResource TreeViewItemForeground}" />
    <Setter Property="MinHeight" Value="{ThemeResource TreeViewItemMinHeight}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="controls:TreeViewItem">
          <Grid x:Name="ContentPresenterGrid" Margin="0,0,0,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="PointerOver">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.(media:RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundPointerOver}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Pressed">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.(media:RevealBrush.State)" Value="Pressed" />
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundPressed}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Selected">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelected}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelected}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelected}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundDisabled}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PointerOverSelected">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.(media:RevealBrush.State)" Value="PointerOver" />
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPointerOver}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelectedPointerOver}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="PressedSelected">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.(media:RevealBrush.State)" Value="Pressed" />
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelectedPressed}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedPressed}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelectedPressed}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="SelectedDisabled">
                  <VisualState.Setters>
                    <Setter Target="ContentPresenterGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelectedDisabled}" />
                    <Setter Target="ContentPresenter.Foreground" Value="{ThemeResource TreeViewItemForegroundSelectedDisabled}" />
                    <Setter Target="ContentPresenterGrid.BorderBrush" Value="{ThemeResource TreeViewItemBorderBrushSelectedDisabled}" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="ReorderedPlaceholder">
                  <Storyboard>
                    <FadeOutThemeAnimation TargetName="MultiSelectGrid" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="TreeViewMultiSelectStates">
                <VisualState x:Name="TreeViewMultiSelectDisabled" />
                <VisualState x:Name="TreeViewMultiSelectEnabledUnselected">
                  <VisualState.Setters>
                    <Setter Target="MultiSelectCheckBox.Visibility" Value="Visible" />
                    <Setter Target="ExpandCollapseChevron.Padding" Value="0,0,12,0" />
                  </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="TreeViewMultiSelectEnabledSelected">
                  <VisualState.Setters>
                    <Setter Target="MultiSelectCheckBox.Visibility" Value="Visible" />
                    <Setter Target="MultiSelectGrid.Background" Value="{ThemeResource TreeViewItemBackgroundSelected}" />
                    <Setter Target="ExpandCollapseChevron.Padding" Value="0,0,12,0" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="DragStates">
                <VisualState x:Name="NotDragging" />
                <VisualState x:Name="MultipleDraggingPrimary">
                  <VisualState.Setters>
                    <Setter Target="MultiSelectCheckBox.Opacity" Value="0" />
                    <Setter Target="MultiArrangeOverlayTextBorder.Visibility" Value="Visible" />
                  </VisualState.Setters>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Grid x:Name="MultiSelectGrid" Padding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.Indentation}">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
              </Grid.ColumnDefinitions>
              <Grid Grid.Column="0">
                <CheckBox x:Name="MultiSelectCheckBox" Width="32" MinWidth="32" Margin="12,0,0,0" VerticalAlignment="Center" Visibility="Collapsed" IsTabStop="False" AutomationProperties.AccessibilityView="Raw" />
                <Border x:Name="MultiArrangeOverlayTextBorder" Visibility="Collapsed" IsHitTestVisible="False" MinWidth="20" Height="20" VerticalAlignment="Center" HorizontalAlignment="Center" Background="{ThemeResource SystemControlBackgroundAccentBrush}" BorderThickness="1" BorderBrush="{ThemeResource SystemControlBackgroundChromeWhiteBrush}" CornerRadius="{ThemeResource ControlCornerRadius}">
                  <TextBlock x:Name="MultiArrangeOverlayText" Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.DragItemsCount}" Style="{ThemeResource CaptionTextBlockStyle}" Foreground="{ThemeResource SystemControlForegroundChromeWhiteBrush}" IsHitTestVisible="False" VerticalAlignment="Center" HorizontalAlignment="Center" AutomationProperties.AccessibilityView="Raw" />
                </Border>
              </Grid>
              <Grid x:Name="ExpandCollapseChevron" Grid.Column="1" Padding="12,0,12,0" Width="Auto" Opacity="{TemplateBinding GlyphOpacity}" Background="Transparent">
                <TextBlock Foreground="{TemplateBinding GlyphBrush}" Width="12" Height="12" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.CollapsedGlyphVisibility}" FontSize="{TemplateBinding GlyphSize}" Text="{TemplateBinding CollapsedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False" IsHitTestVisible="False" />
                <TextBlock Foreground="{TemplateBinding GlyphBrush}" Width="12" Height="12" Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=TreeViewItemTemplateSettings.ExpandedGlyphVisibility}" FontSize="{TemplateBinding GlyphSize}" Text="{TemplateBinding ExpandedGlyph}" FontFamily="{StaticResource SymbolThemeFontFamily}" VerticalAlignment="Center" AutomationProperties.AccessibilityView="Raw" IsTextScaleFactorEnabled="False" IsHitTestVisible="False" />
              </Grid>
              <ContentPresenter x:Name="ContentPresenter" Grid.Column="2" ContentTransitions="{TemplateBinding ContentTransitions}" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" />
            </Grid>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>